diff --git assets/brunch-config.js assets/brunch-config.js
index dc34ce8..b15df46 100644
--- assets/brunch-config.js
+++ assets/brunch-config.js
@@ -5,14 +5,13 @@ exports.config = {
       joinTo: "js/app.js"
 
       // To use a separate vendor.js bundle, specify two files path
-      // https://github.com/brunch/brunch/blob/master/docs/config.md#files
+      // http://brunch.io/docs/config#-files-
       // joinTo: {
-      //  "js/app.js": /^(js)/,
-      //  "js/vendor.js": /^(vendor)|(deps)/
+      //   "js/app.js": /^js/,
+      //   "js/vendor.js": /^(?!js)/
       // }
       //
       // To change the order of concatenation of files, explicitly mention here
-      // https://github.com/brunch/brunch/tree/master/docs#concatenation
       // order: {
       //   before: [
       //     "vendor/js/jquery-2.1.1.js",
diff --git assets/css/phoenix.css assets/css/phoenix.css
index df69d80..0b406d7 100644
--- assets/css/phoenix.css
+++ assets/css/phoenix.css
@@ -17,11 +17,6 @@ body, form, ul, table {
 /* Phoenix flash messages */
 .alert:empty { display: none; }
 
-/* Phoenix inline forms in links and buttons */
-form.link, form.button {
-  display: inline;
-}
-
 /* Custom page header */
 .header {
   border-bottom: 1px solid #e5e5e5;
diff --git assets/package.json assets/package.json
index e180c46..4cc3986 100644
--- assets/package.json
+++ assets/package.json
@@ -10,10 +10,9 @@
     "phoenix_html": "file:../deps/phoenix_html"
   },
   "devDependencies": {
-    "babel-brunch": "6.0.6",
-    "brunch": "2.10.7",
+    "babel-brunch": "6.1.1",
+    "brunch": "2.10.9",
     "clean-css-brunch": "2.10.0",
-    "css-brunch": "2.10.0",
-    "uglify-js-brunch": "2.1.1"
+    "uglify-js-brunch": "2.10.0"
   }
 }
diff --git config/config.exs config/config.exs
index bbfd9f3..49827c9 100644
--- config/config.exs
+++ config/config.exs
@@ -10,17 +10,17 @@ config :sample_app,
   ecto_repos: [SampleApp.Repo]
 
 # Configures the endpoint
-config :sample_app, SampleApp.Web.Endpoint,
+config :sample_app, SampleAppWeb.Endpoint,
   url: [host: "localhost"],
   secret_key_base: "aaaaaaaa",
-  render_errors: [view: SampleApp.Web.ErrorView, accepts: ~w(html json)],
+  render_errors: [view: SampleAppWeb.ErrorView, accepts: ~w(html json)],
   pubsub: [name: SampleApp.PubSub,
            adapter: Phoenix.PubSub.PG2]
 
 # Configures Elixir's Logger
 config :logger, :console,
   format: "$time $metadata[$level] $message\n",
-  metadata: [:request_id]
+  metadata: [:user_id]
 
 # Import environment specific config. This must remain at the bottom
 # of this file so it overrides the configuration defined above.
diff --git config/dev.exs config/dev.exs
index f6c5756..266bcda 100644
--- config/dev.exs
+++ config/dev.exs
@@ -6,7 +6,7 @@ use Mix.Config
 # The watchers configuration can be used to run external
 # watchers to your application. For example, we use it
 # with brunch.io to recompile .js and .css sources.
-config :sample_app, SampleApp.Web.Endpoint,
+config :sample_app, SampleAppWeb.Endpoint,
   http: [port: 4000],
   debug_errors: true,
   code_reloader: true,
@@ -31,13 +31,13 @@ config :sample_app, SampleApp.Web.Endpoint,
 # different ports.
 
 # Watch static and templates for browser reloading.
-config :sample_app, SampleApp.Web.Endpoint,
+config :sample_app, SampleAppWeb.Endpoint,
   live_reload: [
     patterns: [
       ~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},
       ~r{priv/gettext/.*(po)$},
-      ~r{lib/sample_app/web/views/.*(ex)$},
-      ~r{lib/sample_app/web/templates/.*(eex)$}
+      ~r{lib/sample_app_web/views/.*(ex)$},
+      ~r{lib/sample_app_web/templates/.*(eex)$}
     ]
   ]
 
diff --git config/prod.exs config/prod.exs
index e911c6c..ab7536b 100644
--- config/prod.exs
+++ config/prod.exs
@@ -3,18 +3,18 @@ use Mix.Config
 # For production, we often load configuration from external
 # sources, such as your system environment. For this reason,
 # you won't find the :http configuration below, but set inside
-# SampleApp.Web.Endpoint.load_from_system_env/1 dynamically.
-# Any dynamic configuration should be moved to such function.
+# SampleAppWeb.Endpoint.init/2 when load_from_system_env is
+# true. Any dynamic configuration should be done there.
 #
 # Don't forget to configure the url host to something meaningful,
 # Phoenix uses this information when generating URLs.
 #
 # Finally, we also include the path to a cache manifest
 # containing the digested version of static files. This
-# manifest is generated by the mix phoenix.digest task
+# manifest is generated by the mix phx.digest task
 # which you typically run after static files are built.
-config :sample_app, SampleApp.Web.Endpoint,
-  on_init: {SampleApp.Web.Endpoint, :load_from_system_env, []},
+config :sample_app, SampleAppWeb.Endpoint,
+  load_from_system_env: true,
   url: [host: "example.com", port: 80],
   cache_static_manifest: "priv/static/cache_manifest.json"
 
@@ -26,7 +26,7 @@ config :logger, level: :info
 # To get SSL working, you will need to add the `https` key
 # to the previous section and set your `:url` port to 443:
 #
-#     config :sample_app, SampleApp.Web.Endpoint,
+#     config :sample_app, SampleAppWeb.Endpoint,
 #       ...
 #       url: [host: "example.com", port: 443],
 #       https: [:inet6,
@@ -41,7 +41,7 @@ config :logger, level: :info
 # We also recommend setting `force_ssl`, ensuring no data is
 # ever sent via http, always redirecting to https:
 #
-#     config :sample_app, SampleApp.Web.Endpoint,
+#     config :sample_app, SampleAppWeb.Endpoint,
 #       force_ssl: [hsts: true]
 #
 # Check `Plug.SSL` for all available options in `force_ssl`.
@@ -56,7 +56,7 @@ config :logger, level: :info
 # Alternatively, you can configure exactly which server to
 # start per endpoint:
 #
-#     config :sample_app, SampleApp.Web.Endpoint, server: true
+#     config :sample_app, SampleAppWeb.Endpoint, server: true
 #
 
 # Finally import the config/prod.secret.exs
diff --git config/prod.secret.exs config/prod.secret.exs
index ef461fd..1433abb 100644
--- config/prod.secret.exs
+++ config/prod.secret.exs
@@ -1,14 +1,14 @@
 use Mix.Config
 
 # In this file, we keep production configuration that
-# you likely want to automate and keep it away from
+# you'll likely want to automate and keep away from
 # your version control system.
 #
 # You should document the content of this
 # file or create a script for recreating it, since it's
 # kept out of version control and might be hard to recover
-# or recreate for your teammates (or you later on).
-config :sample_app, SampleApp.Web.Endpoint,
+# or recreate for your teammates (or yourself later on).
+config :sample_app, SampleAppWeb.Endpoint,
   secret_key_base: "aaaaaaaa"
 
 # Configure your database
diff --git config/test.exs config/test.exs
index bbcae6f..f6ca638 100644
--- config/test.exs
+++ config/test.exs
@@ -2,7 +2,7 @@ use Mix.Config
 
 # We don't run a server during test. If one is required,
 # you can enable the server option below.
-config :sample_app, SampleApp.Web.Endpoint,
+config :sample_app, SampleAppWeb.Endpoint,
   http: [port: 4001],
   server: false
 
diff --git lib/sample_app/application.ex lib/sample_app/application.ex
index c354fc6..5578069 100644
--- lib/sample_app/application.ex
+++ lib/sample_app/application.ex
@@ -1,7 +1,7 @@
 defmodule SampleApp.Application do
   use Application
 
-  # See http://elixir-lang.org/docs/stable/elixir/Application.html
+  # See https://hexdocs.pm/elixir/Application.html
   # for more information on OTP Applications
   def start(_type, _args) do
     import Supervisor.Spec
@@ -11,14 +11,21 @@ defmodule SampleApp.Application do
       # Start the Ecto repository
       supervisor(SampleApp.Repo, []),
       # Start the endpoint when the application starts
-      supervisor(SampleApp.Web.Endpoint, []),
+      supervisor(SampleAppWeb.Endpoint, []),
       # Start your own worker by calling: SampleApp.Worker.start_link(arg1, arg2, arg3)
       # worker(SampleApp.Worker, [arg1, arg2, arg3]),
     ]
 
-    # See http://elixir-lang.org/docs/stable/elixir/Supervisor.html
+    # See https://hexdocs.pm/elixir/Supervisor.html
     # for other strategies and supported options
     opts = [strategy: :one_for_one, name: SampleApp.Supervisor]
     Supervisor.start_link(children, opts)
   end
+
+  # Tell Phoenix to update the endpoint configuration
+  # whenever the application is updated.
+  def config_change(changed, _new, removed) do
+    SampleAppWeb.Endpoint.config_change(changed, removed)
+    :ok
+  end
 end
diff --git lib/sample_app/web/controllers/page_controller.ex b/data/sample-app/1.3.0-rc.1/lib/sample_app/web/controllers/page_controller.ex
deleted file mode 100644
index e9ed2bf..0000000
--- lib/sample_app/web/controllers/page_controller.ex
+++ /dev/null
@@ -1,7 +0,0 @@
-defmodule SampleApp.Web.PageController do
-  use SampleApp.Web, :controller
-
-  def index(conn, _params) do
-    render conn, "index.html"
-  end
-end
diff --git lib/sample_app/web/views/error_helpers.ex b/data/sample-app/1.3.0-rc.1/lib/sample_app/web/views/error_helpers.ex
deleted file mode 100644
index 0a568ad..0000000
--- lib/sample_app/web/views/error_helpers.ex
+++ /dev/null
@@ -1,40 +0,0 @@
-defmodule SampleApp.Web.ErrorHelpers do
-  @moduledoc """
-  Conveniences for translating and building error messages.
-  """
-
-  use Phoenix.HTML
-
-  @doc """
-  Generates tag for inlined form input errors.
-  """
-  def error_tag(form, field) do
-    if error = form.errors[field] do
-      content_tag :span, translate_error(error), class: "help-block"
-    end
-  end
-
-  @doc """
-  Translates an error message using gettext.
-  """
-  def translate_error({msg, opts}) do
-    # Because error messages were defined within Ecto, we must
-    # call the Gettext module passing our Gettext backend. We
-    # also use the "errors" domain as translations are placed
-    # in the errors.po file.
-    # Ecto will pass the :count keyword if the error message is
-    # meant to be pluralized.
-    # On your own code and templates, depending on whether you
-    # need the message to be pluralized or not, this could be
-    # written simply as:
-    #
-    #     dngettext "errors", "1 file", "%{count} files", count
-    #     dgettext "errors", "is invalid"
-    #
-    if count = opts[:count] do
-      Gettext.dngettext(SampleApp.Web.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(SampleApp.Web.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git lib/sample_app/web/views/error_view.ex b/data/sample-app/1.3.0-rc.1/lib/sample_app/web/views/error_view.ex
deleted file mode 100644
index 5670e83..0000000
--- lib/sample_app/web/views/error_view.ex
+++ /dev/null
@@ -1,17 +0,0 @@
-defmodule SampleApp.Web.ErrorView do
-  use SampleApp.Web, :view
-
-  def render("404.html", _assigns) do
-    "Page not found"
-  end
-
-  def render("500.html", _assigns) do
-    "Internal server error"
-  end
-
-  # In case no render clause matches or no
-  # template is found, let's render it as 500
-  def template_not_found(_template, assigns) do
-    render "500.html", assigns
-  end
-end
diff --git lib/sample_app/web/views/layout_view.ex b/data/sample-app/1.3.0-rc.1/lib/sample_app/web/views/layout_view.ex
deleted file mode 100644
index c697ae7..0000000
--- lib/sample_app/web/views/layout_view.ex
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule SampleApp.Web.LayoutView do
-  use SampleApp.Web, :view
-end
diff --git lib/sample_app/web/views/page_view.ex b/data/sample-app/1.3.0-rc.1/lib/sample_app/web/views/page_view.ex
deleted file mode 100644
index ff9ee43..0000000
--- lib/sample_app/web/views/page_view.ex
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule SampleApp.Web.PageView do
-  use SampleApp.Web, :view
-end
diff --git a/data/sample-app/1.3.3/lib/sample_app.ex lib/sample_app.ex
new file mode 100644
index 0000000..8b25718
--- /dev/null
+++ lib/sample_app.ex
@@ -0,0 +1,9 @@
+defmodule SampleApp do
+  @moduledoc """
+  SampleApp keeps the contexts that define your domain
+  and business logic.
+
+  Contexts are also responsible for managing your data, regardless
+  if it comes from the database, an external API or others.
+  """
+end
diff --git lib/sample_app/web/channels/user_socket.ex lib/sample_app_web/channels/user_socket.ex
similarity index 85%
rename from data/sample-app/1.3.0-rc.1/lib/sample_app/web/channels/user_socket.ex
rename to data/sample-app/1.3.3/lib/sample_app_web/channels/user_socket.ex
index 074b2b5..80c0cfa 100644
--- lib/sample_app/web/channels/user_socket.ex
+++ lib/sample_app_web/channels/user_socket.ex
@@ -1,8 +1,8 @@
-defmodule SampleApp.Web.UserSocket do
+defmodule SampleAppWeb.UserSocket do
   use Phoenix.Socket
 
   ## Channels
-  # channel "room:*", SampleApp.Web.RoomChannel
+  # channel "room:*", SampleAppWeb.RoomChannel
 
   ## Transports
   transport :websocket, Phoenix.Transports.WebSocket
@@ -30,7 +30,7 @@ defmodule SampleApp.Web.UserSocket do
   # Would allow you to broadcast a "disconnect" event and terminate
   # all active sockets and channels for a given user:
   #
-  #     SampleApp.Web.Endpoint.broadcast("user_socket:#{user.id}", "disconnect", %{})
+  #     SampleAppWeb.Endpoint.broadcast("user_socket:#{user.id}", "disconnect", %{})
   #
   # Returning `nil` makes this socket anonymous.
   def id(_socket), do: nil
diff --git a/data/sample-app/1.3.3/lib/sample_app_web/controllers/page_controller.ex lib/sample_app_web/controllers/page_controller.ex
new file mode 100644
index 0000000..c981617
--- /dev/null
+++ lib/sample_app_web/controllers/page_controller.ex
@@ -0,0 +1,7 @@
+defmodule SampleAppWeb.PageController do
+  use SampleAppWeb, :controller
+
+  def index(conn, _params) do
+    render conn, "index.html"
+  end
+end
diff --git lib/sample_app/web/endpoint.ex lib/sample_app_web/endpoint.ex
similarity index 67%
rename from data/sample-app/1.3.0-rc.1/lib/sample_app/web/endpoint.ex
rename to data/sample-app/1.3.3/lib/sample_app_web/endpoint.ex
index a7bd549..58ce45a 100644
--- lib/sample_app/web/endpoint.ex
+++ lib/sample_app_web/endpoint.ex
@@ -1,7 +1,7 @@
-defmodule SampleApp.Web.Endpoint do
+defmodule SampleAppWeb.Endpoint do
   use Phoenix.Endpoint, otp_app: :sample_app
 
-  socket "/socket", SampleApp.Web.UserSocket
+  socket "/socket", SampleAppWeb.UserSocket
 
   # Serve at "/" the static files from "priv/static" directory.
   #
@@ -19,7 +19,6 @@ defmodule SampleApp.Web.Endpoint do
     plug Phoenix.CodeReloader
   end
 
-  plug Plug.RequestId
   plug Plug.Logger
 
   plug Plug.Parsers,
@@ -38,17 +37,20 @@ defmodule SampleApp.Web.Endpoint do
     key: "_sample_app_key",
     signing_salt: "aaaaaaaa"
 
-  plug SampleApp.Web.Router
+  plug SampleAppWeb.Router
 
   @doc """
-  Dynamically loads configuration from the system environment
-  on startup.
+  Callback invoked for dynamically configuring the endpoint.
 
-  It receives the endpoint configuration from the config files
-  and must return the updated configuration.
+  It receives the endpoint configuration and checks if
+  configuration should be loaded from the system environment.
   """
-  def load_from_system_env(config) do
-    port = System.get_env("PORT") || raise "expected the PORT environment variable to be set"
-    {:ok, Keyword.put(config, :http, [:inet6, port: port])}
+  def init(_key, config) do
+    if config[:load_from_system_env] do
+      port = System.get_env("PORT") || raise "expected the PORT environment variable to be set"
+      {:ok, Keyword.put(config, :http, [:inet6, port: port])}
+    else
+      {:ok, config}
+    end
   end
 end
diff --git lib/sample_app/web/gettext.ex lib/sample_app_web/gettext.ex
similarity index 90%
rename from data/sample-app/1.3.0-rc.1/lib/sample_app/web/gettext.ex
rename to data/sample-app/1.3.3/lib/sample_app_web/gettext.ex
index f88b4c0..448a09d 100644
--- lib/sample_app/web/gettext.ex
+++ lib/sample_app_web/gettext.ex
@@ -1,11 +1,11 @@
-defmodule SampleApp.Web.Gettext do
+defmodule SampleAppWeb.Gettext do
   @moduledoc """
   A module providing Internationalization with a gettext-based API.
 
   By using [Gettext](https://hexdocs.pm/gettext),
   your module gains a set of macros for translations, for example:
 
-      import SampleApp.Web.Gettext
+      import SampleAppWeb.Gettext
 
       # Simple translation
       gettext "Here is the string to translate"
diff --git lib/sample_app/web/router.ex lib/sample_app_web/router.ex
similarity index 75%
rename from data/sample-app/1.3.0-rc.1/lib/sample_app/web/router.ex
rename to data/sample-app/1.3.3/lib/sample_app_web/router.ex
index fe0f0ac..67e88f4 100644
--- lib/sample_app/web/router.ex
+++ lib/sample_app_web/router.ex
@@ -1,5 +1,5 @@
-defmodule SampleApp.Web.Router do
-  use SampleApp.Web, :router
+defmodule SampleAppWeb.Router do
+  use SampleAppWeb, :router
 
   pipeline :browser do
     plug :accepts, ["html"]
@@ -13,14 +13,14 @@ defmodule SampleApp.Web.Router do
     plug :accepts, ["json"]
   end
 
-  scope "/", SampleApp.Web do
+  scope "/", SampleAppWeb do
     pipe_through :browser # Use the default browser stack
 
     get "/", PageController, :index
   end
 
   # Other scopes may use custom stacks.
-  # scope "/api", SampleApp.Web do
+  # scope "/api", SampleAppWeb do
   #   pipe_through :api
   # end
 end
diff --git lib/sample_app/web/templates/layout/app.html.eex lib/sample_app_web/templates/layout/app.html.eex
similarity index 100%
rename from data/sample-app/1.3.0-rc.1/lib/sample_app/web/templates/layout/app.html.eex
rename to data/sample-app/1.3.3/lib/sample_app_web/templates/layout/app.html.eex
diff --git lib/sample_app/web/templates/page/index.html.eex lib/sample_app_web/templates/page/index.html.eex
similarity index 100%
rename from data/sample-app/1.3.0-rc.1/lib/sample_app/web/templates/page/index.html.eex
rename to data/sample-app/1.3.3/lib/sample_app_web/templates/page/index.html.eex
diff --git a/data/sample-app/1.3.3/lib/sample_app_web/views/error_helpers.ex lib/sample_app_web/views/error_helpers.ex
new file mode 100644
index 0000000..3425ae8
--- /dev/null
+++ lib/sample_app_web/views/error_helpers.ex
@@ -0,0 +1,44 @@
+defmodule SampleAppWeb.ErrorHelpers do
+  @moduledoc """
+  Conveniences for translating and building error messages.
+  """
+
+  use Phoenix.HTML
+
+  @doc """
+  Generates tag for inlined form input errors.
+  """
+  def error_tag(form, field) do
+    Enum.map(Keyword.get_values(form.errors, field), fn (error) ->
+      content_tag :span, translate_error(error), class: "help-block"
+    end)
+  end
+
+  @doc """
+  Translates an error message using gettext.
+  """
+  def translate_error({msg, opts}) do
+    # When using gettext, we typically pass the strings we want
+    # to translate as a static argument:
+    #
+    #     # Translate "is invalid" in the "errors" domain
+    #     dgettext "errors", "is invalid"
+    #
+    #     # Translate the number of files with plural rules
+    #     dngettext "errors", "1 file", "%{count} files", count
+    #
+    # Because the error messages we show in our forms and APIs
+    # are defined inside Ecto, we need to translate them dynamically.
+    # This requires us to call the Gettext module passing our gettext
+    # backend as first argument.
+    #
+    # Note we use the "errors" domain, which means translations
+    # should be written to the errors.po file. The :count option is
+    # set by Ecto and indicates we should also apply plural rules.
+    if count = opts[:count] do
+      Gettext.dngettext(SampleAppWeb.Gettext, "errors", msg, msg, count, opts)
+    else
+      Gettext.dgettext(SampleAppWeb.Gettext, "errors", msg, opts)
+    end
+  end
+end
diff --git a/data/sample-app/1.3.3/lib/sample_app_web/views/error_view.ex lib/sample_app_web/views/error_view.ex
new file mode 100644
index 0000000..90e0830
--- /dev/null
+++ lib/sample_app_web/views/error_view.ex
@@ -0,0 +1,16 @@
+defmodule SampleAppWeb.ErrorView do
+  use SampleAppWeb, :view
+
+  # If you want to customize a particular status code
+  # for a certain format, you may uncomment below.
+  # def render("500.html", _assigns) do
+  #   "Internal Server Error"
+  # end
+
+  # By default, Phoenix returns the status message from
+  # the template name. For example, "404.html" becomes
+  # "Not Found".
+  def template_not_found(template, _assigns) do
+    Phoenix.Controller.status_message_from_template(template)
+  end
+end
diff --git a/data/sample-app/1.3.3/lib/sample_app_web/views/layout_view.ex lib/sample_app_web/views/layout_view.ex
new file mode 100644
index 0000000..0e4cd22
--- /dev/null
+++ lib/sample_app_web/views/layout_view.ex
@@ -0,0 +1,3 @@
+defmodule SampleAppWeb.LayoutView do
+  use SampleAppWeb, :view
+end
diff --git a/data/sample-app/1.3.3/lib/sample_app_web/views/page_view.ex lib/sample_app_web/views/page_view.ex
new file mode 100644
index 0000000..b51be24
--- /dev/null
+++ lib/sample_app_web/views/page_view.ex
@@ -0,0 +1,3 @@
+defmodule SampleAppWeb.PageView do
+  use SampleAppWeb, :view
+end
diff --git lib/sample_app/web/web.ex lib/sample_app_web.ex
similarity index 54%
rename from data/sample-app/1.3.0-rc.1/lib/sample_app/web/web.ex
rename to data/sample-app/1.3.3/lib/sample_app_web.ex
index a706482..e9fd1b8 100644
--- lib/sample_app/web/web.ex
+++ lib/sample_app_web.ex
@@ -1,44 +1,45 @@
-defmodule SampleApp.Web do
+defmodule SampleAppWeb do
   @moduledoc """
-  A module that keeps using definitions for controllers,
-  views and so on.
+  The entrypoint for defining your web interface, such
+  as controllers, views, channels and so on.
 
   This can be used in your application as:
 
-      use SampleApp.Web, :controller
-      use SampleApp.Web, :view
+      use SampleAppWeb, :controller
+      use SampleAppWeb, :view
 
   The definitions below will be executed for every view,
   controller, etc, so keep them short and clean, focused
   on imports, uses and aliases.
 
   Do NOT define functions inside the quoted expressions
-  below.
+  below. Instead, define any helper function in modules
+  and import those modules here.
   """
 
   def controller do
     quote do
-      use Phoenix.Controller, namespace: SampleApp.Web
+      use Phoenix.Controller, namespace: SampleAppWeb
       import Plug.Conn
-      import SampleApp.Web.Router.Helpers
-      import SampleApp.Web.Gettext
+      import SampleAppWeb.Router.Helpers
+      import SampleAppWeb.Gettext
     end
   end
 
   def view do
     quote do
-      use Phoenix.View, root: "lib/sample_app/web/templates",
-                        namespace: SampleApp.Web
+      use Phoenix.View, root: "lib/sample_app_web/templates",
+                        namespace: SampleAppWeb
 
       # Import convenience functions from controllers
-      import Phoenix.Controller, only: [get_csrf_token: 0, get_flash: 2, view_module: 1]
+      import Phoenix.Controller, only: [get_flash: 2, view_module: 1]
 
       # Use all HTML functionality (forms, tags, etc)
       use Phoenix.HTML
 
-      import SampleApp.Web.Router.Helpers
-      import SampleApp.Web.ErrorHelpers
-      import SampleApp.Web.Gettext
+      import SampleAppWeb.Router.Helpers
+      import SampleAppWeb.ErrorHelpers
+      import SampleAppWeb.Gettext
     end
   end
 
@@ -53,7 +54,7 @@ defmodule SampleApp.Web do
   def channel do
     quote do
       use Phoenix.Channel
-      import SampleApp.Web.Gettext
+      import SampleAppWeb.Gettext
     end
   end
 
diff --git mix.exs mix.exs
index ec4b5fa..3c379b7 100644
--- mix.exs
+++ mix.exs
@@ -2,22 +2,26 @@ defmodule SampleApp.Mixfile do
   use Mix.Project
 
   def project do
-    [app: :sample_app,
-     version: "0.0.1",
-     elixir: "~> 1.4",
-     elixirc_paths: elixirc_paths(Mix.env),
-     compilers: [:phoenix, :gettext] ++ Mix.compilers,
-     start_permanent: Mix.env == :prod,
-     aliases: aliases(),
-     deps: deps()]
+    [
+      app: :sample_app,
+      version: "0.0.1",
+      elixir: "~> 1.4",
+      elixirc_paths: elixirc_paths(Mix.env),
+      compilers: [:phoenix, :gettext] ++ Mix.compilers,
+      start_permanent: Mix.env == :prod,
+      aliases: aliases(),
+      deps: deps()
+    ]
   end
 
   # Configuration for the OTP application.
   #
   # Type `mix help compile.app` for more information.
   def application do
-    [mod: {SampleApp.Application, []},
-     extra_applications: [:logger, :runtime_tools]]
+    [
+      mod: {SampleApp.Application, []},
+      extra_applications: [:logger, :runtime_tools]
+    ]
   end
 
   # Specifies which paths to compile per environment.
@@ -28,14 +32,16 @@ defmodule SampleApp.Mixfile do
   #
   # Type `mix help deps` for examples and options.
   defp deps do
-    [{:phoenix, "~> 1.3.0-rc"},
-     {:phoenix_pubsub, "~> 1.0"},
-     {:phoenix_ecto, "~> 3.2"},
-     {:postgrex, ">= 0.0.0"},
-     {:phoenix_html, "~> 2.6"},
-     {:phoenix_live_reload, "~> 1.0", only: :dev},
-     {:gettext, "~> 0.11"},
-     {:cowboy, "~> 1.0"}]
+    [
+      {:phoenix, "~> 1.3.3"},
+      {:phoenix_pubsub, "~> 1.0"},
+      {:phoenix_ecto, "~> 3.2"},
+      {:postgrex, ">= 0.0.0"},
+      {:phoenix_html, "~> 2.10"},
+      {:phoenix_live_reload, "~> 1.0", only: :dev},
+      {:gettext, "~> 0.11"},
+      {:cowboy, "~> 1.0"}
+    ]
   end
 
   # Aliases are shortcuts or tasks specific to the current project.
@@ -45,8 +51,10 @@ defmodule SampleApp.Mixfile do
   #
   # See the documentation for `Mix` for more info on aliases.
   defp aliases do
-    ["ecto.setup": ["ecto.create", "ecto.migrate", "run priv/repo/seeds.exs"],
-     "ecto.reset": ["ecto.drop", "ecto.setup"],
-     "test": ["ecto.create --quiet", "ecto.migrate", "test"]]
+    [
+      "ecto.setup": ["ecto.create", "ecto.migrate", "run priv/repo/seeds.exs"],
+      "ecto.reset": ["ecto.drop", "ecto.setup"],
+      "test": ["ecto.create --quiet", "ecto.migrate", "test"]
+    ]
   end
 end
diff --git priv/gettext/en/LC_MESSAGES/errors.po priv/gettext/en/LC_MESSAGES/errors.po
index 2211c98..a589998 100644
--- priv/gettext/en/LC_MESSAGES/errors.po
+++ priv/gettext/en/LC_MESSAGES/errors.po
@@ -22,6 +22,10 @@ msgstr ""
 msgid "is invalid"
 msgstr ""
 
+## From Ecto.Changeset.validate_acceptance/3
+msgid "must be accepted"
+msgstr ""
+
 ## From Ecto.Changeset.validate_format/3
 msgid "has invalid format"
 msgstr ""
diff --git priv/gettext/errors.pot priv/gettext/errors.pot
index a964f84..7b2d5ca 100644
--- priv/gettext/errors.pot
+++ priv/gettext/errors.pot
@@ -20,6 +20,10 @@ msgstr ""
 msgid "is invalid"
 msgstr ""
 
+## From Ecto.Changeset.validate_acceptance/3
+msgid "must be accepted"
+msgstr ""
+
 ## From Ecto.Changeset.validate_format/3
 msgid "has invalid format"
 msgstr ""
diff --git test/web/controllers/page_controller_test.exs test/sample_app_web/controllers/page_controller_test.exs
similarity index 63%
rename from data/sample-app/1.3.0-rc.1/test/web/controllers/page_controller_test.exs
rename to data/sample-app/1.3.3/test/sample_app_web/controllers/page_controller_test.exs
index 9ef8fcd..23ef554 100644
--- test/web/controllers/page_controller_test.exs
+++ test/sample_app_web/controllers/page_controller_test.exs
@@ -1,5 +1,5 @@
-defmodule SampleApp.Web.PageControllerTest do
-  use SampleApp.Web.ConnCase
+defmodule SampleAppWeb.PageControllerTest do
+  use SampleAppWeb.ConnCase
 
   test "GET /", %{conn: conn} do
     conn = get conn, "/"
diff --git a/data/sample-app/1.3.3/test/sample_app_web/views/error_view_test.exs test/sample_app_web/views/error_view_test.exs
new file mode 100644
index 0000000..7bcd5db
--- /dev/null
+++ test/sample_app_web/views/error_view_test.exs
@@ -0,0 +1,16 @@
+defmodule SampleAppWeb.ErrorViewTest do
+  use SampleAppWeb.ConnCase, async: true
+
+  # Bring render/3 and render_to_string/3 for testing custom views
+  import Phoenix.View
+
+  test "renders 404.html" do
+    assert render_to_string(SampleAppWeb.ErrorView, "404.html", []) ==
+           "Not Found"
+  end
+
+  test "renders 500.html" do
+    assert render_to_string(SampleAppWeb.ErrorView, "500.html", []) ==
+           "Internal Server Error"
+  end
+end
diff --git a/data/sample-app/1.3.3/test/sample_app_web/views/layout_view_test.exs test/sample_app_web/views/layout_view_test.exs
new file mode 100644
index 0000000..6125800
--- /dev/null
+++ test/sample_app_web/views/layout_view_test.exs
@@ -0,0 +1,3 @@
+defmodule SampleAppWeb.LayoutViewTest do
+  use SampleAppWeb.ConnCase, async: true
+end
diff --git a/data/sample-app/1.3.3/test/sample_app_web/views/page_view_test.exs test/sample_app_web/views/page_view_test.exs
new file mode 100644
index 0000000..fe4c216
--- /dev/null
+++ test/sample_app_web/views/page_view_test.exs
@@ -0,0 +1,3 @@
+defmodule SampleAppWeb.PageViewTest do
+  use SampleAppWeb.ConnCase, async: true
+end
diff --git test/support/channel_case.ex test/support/channel_case.ex
index 3852306..665b82c 100644
--- test/support/channel_case.ex
+++ test/support/channel_case.ex
@@ -1,4 +1,4 @@
-defmodule SampleApp.Web.ChannelCase do
+defmodule SampleAppWeb.ChannelCase do
   @moduledoc """
   This module defines the test case to be used by
   channel tests.
@@ -21,7 +21,7 @@ defmodule SampleApp.Web.ChannelCase do
       use Phoenix.ChannelTest
 
       # The default endpoint for testing
-      @endpoint SampleApp.Web.Endpoint
+      @endpoint SampleAppWeb.Endpoint
     end
   end
 
diff --git test/support/conn_case.ex test/support/conn_case.ex
index 6cbddf0..7c07f2d 100644
--- test/support/conn_case.ex
+++ test/support/conn_case.ex
@@ -1,4 +1,4 @@
-defmodule SampleApp.Web.ConnCase do
+defmodule SampleAppWeb.ConnCase do
   @moduledoc """
   This module defines the test case to be used by
   tests that require setting up a connection.
@@ -19,10 +19,10 @@ defmodule SampleApp.Web.ConnCase do
     quote do
       # Import conveniences for testing with connections
       use Phoenix.ConnTest
-      import SampleApp.Web.Router.Helpers
+      import SampleAppWeb.Router.Helpers
 
       # The default endpoint for testing
-      @endpoint SampleApp.Web.Endpoint
+      @endpoint SampleAppWeb.Endpoint
     end
   end
 
diff --git test/support/data_case.ex test/support/data_case.ex
index ba71255..3a682c2 100644
--- test/support/data_case.ex
+++ test/support/data_case.ex
@@ -38,7 +38,7 @@ defmodule SampleApp.DataCase do
   @doc """
   A helper that transform changeset errors to a map of messages.
 
-      changeset = Accounts.create_user(%{password: "short"})
+      assert {:error, changeset} = Accounts.create_user(%{password: "short"})
       assert "password is too short" in errors_on(changeset).password
       assert %{password: ["password is too short"]} = errors_on(changeset)
 
diff --git test/web/views/error_view_test.exs b/data/sample-app/1.3.0-rc.1/test/web/views/error_view_test.exs
deleted file mode 100644
index 19b51ac..0000000
--- test/web/views/error_view_test.exs
+++ /dev/null
@@ -1,21 +0,0 @@
-defmodule SampleApp.Web.ErrorViewTest do
-  use SampleApp.Web.ConnCase, async: true
-
-  # Bring render/3 and render_to_string/3 for testing custom views
-  import Phoenix.View
-
-  test "renders 404.html" do
-    assert render_to_string(SampleApp.Web.ErrorView, "404.html", []) ==
-           "Page not found"
-  end
-
-  test "render 500.html" do
-    assert render_to_string(SampleApp.Web.ErrorView, "500.html", []) ==
-           "Internal server error"
-  end
-
-  test "render any other" do
-    assert render_to_string(SampleApp.Web.ErrorView, "505.html", []) ==
-           "Internal server error"
-  end
-end
diff --git test/web/views/layout_view_test.exs b/data/sample-app/1.3.0-rc.1/test/web/views/layout_view_test.exs
deleted file mode 100644
index 62508b6..0000000
--- test/web/views/layout_view_test.exs
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule SampleApp.Web.LayoutViewTest do
-  use SampleApp.Web.ConnCase, async: true
-end
diff --git test/web/views/page_view_test.exs b/data/sample-app/1.3.0-rc.1/test/web/views/page_view_test.exs
deleted file mode 100644
index d04cf07..0000000
--- test/web/views/page_view_test.exs
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule SampleApp.Web.PageViewTest do
-  use SampleApp.Web.ConnCase, async: true
-end
