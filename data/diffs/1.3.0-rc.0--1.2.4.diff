diff --git .gitignore .gitignore
index d5be28f..19fe3da 100644
--- .gitignore
+++ .gitignore
@@ -7,21 +7,18 @@
 # Generated on crash by the VM
 erl_crash.dump
 
-# Generated on crash by NPM
-npm-debug.log
-
 # Static artifacts
-/assets/node_modules
+/node_modules
 
-# Since we are building assets from assets/,
+# Since we are building assets from web/static,
 # we ignore priv/static. You may want to comment
 # this depending on your deployment strategy.
 /priv/static/
 
-# Files matching config/*.secret.exs pattern contain sensitive
-# data and you should not commit them into version control.
+# The config/prod.secret.exs file by default contains sensitive
+# data and you should not commit it into version control.
 #
 # Alternatively, you may comment the line below and commit the
-# secrets files as long as you replace their contents by environment
+# secrets file as long as you replace its contents by environment
 # variables.
-/config/*.secret.exs
\ No newline at end of file
+/config/prod.secret.exs
diff --git README.md README.md
index d5e898e..0940f60 100644
--- README.md
+++ README.md
@@ -1,11 +1,11 @@
 # SampleApp
 
-To start your Phoenix server:
+To start your Phoenix app:
 
   * Install dependencies with `mix deps.get`
   * Create and migrate your database with `mix ecto.create && mix ecto.migrate`
-  * Install Node.js dependencies with `cd assets && npm install`
-  * Start Phoenix endpoint with `mix phx.server`
+  * Install Node.js dependencies with `npm install`
+  * Start Phoenix endpoint with `mix phoenix.server`
 
 Now you can visit [`localhost:4000`](http://localhost:4000) from your browser.
 
diff --git assets/package.json b/data/sample-app/1.3.0-rc.0/assets/package.json
deleted file mode 100644
index e180c46..0000000
--- assets/package.json
+++ /dev/null
@@ -1,19 +0,0 @@
-{
-  "repository": {},
-  "license": "MIT",
-  "scripts": {
-    "deploy": "brunch build --production",
-    "watch": "brunch watch --stdin"
-  },
-  "dependencies": {
-    "phoenix": "file:../deps/phoenix",
-    "phoenix_html": "file:../deps/phoenix_html"
-  },
-  "devDependencies": {
-    "babel-brunch": "6.0.6",
-    "brunch": "2.10.7",
-    "clean-css-brunch": "2.10.0",
-    "css-brunch": "2.10.0",
-    "uglify-js-brunch": "2.1.1"
-  }
-}
diff --git assets/brunch-config.js brunch-config.js
similarity index 59%
rename from data/sample-app/1.3.0-rc.0/assets/brunch-config.js
rename to data/sample-app/1.2.4/brunch-config.js
index dc34ce8..d2fe679 100644
--- assets/brunch-config.js
+++ brunch-config.js
@@ -5,23 +5,25 @@ exports.config = {
       joinTo: "js/app.js"
 
       // To use a separate vendor.js bundle, specify two files path
-      // https://github.com/brunch/brunch/blob/master/docs/config.md#files
+      // http://brunch.io/docs/config#-files-
       // joinTo: {
-      //  "js/app.js": /^(js)/,
-      //  "js/vendor.js": /^(vendor)|(deps)/
+      //  "js/app.js": /^(web\/static\/js)/,
+      //  "js/vendor.js": /^(web\/static\/vendor)|(deps)/
       // }
       //
       // To change the order of concatenation of files, explicitly mention here
-      // https://github.com/brunch/brunch/tree/master/docs#concatenation
       // order: {
       //   before: [
-      //     "vendor/js/jquery-2.1.1.js",
-      //     "vendor/js/bootstrap.min.js"
+      //     "web/static/vendor/js/jquery-2.1.1.js",
+      //     "web/static/vendor/js/bootstrap.min.js"
       //   ]
       // }
     },
     stylesheets: {
-      joinTo: "css/app.css"
+      joinTo: "css/app.css",
+      order: {
+        after: ["web/static/css/app.css"] // concat app.css last
+      }
     },
     templates: {
       joinTo: "js/app.js"
@@ -30,30 +32,34 @@ exports.config = {
 
   conventions: {
     // This option sets where we should place non-css and non-js assets in.
-    // By default, we set this to "/assets/static". Files in this directory
+    // By default, we set this to "/web/static/assets". Files in this directory
     // will be copied to `paths.public`, which is "priv/static" by default.
-    assets: /^(static)/
+    assets: /^(web\/static\/assets)/
   },
 
   // Phoenix paths configuration
   paths: {
     // Dependencies and current project directories to watch
-    watched: ["static", "css", "js", "vendor"],
+    watched: [
+      "web/static",
+      "test/static"
+    ],
+
     // Where to compile files to
-    public: "../priv/static"
+    public: "priv/static"
   },
 
   // Configure your plugins
   plugins: {
     babel: {
       // Do not use ES6 compiler in vendor code
-      ignore: [/vendor/]
+      ignore: [/web\/static\/vendor/]
     }
   },
 
   modules: {
     autoRequire: {
-      "js/app.js": ["js/app"]
+      "js/app.js": ["web/static/js/app"]
     }
   },
 
diff --git config/config.exs config/config.exs
index bbfd9f3..5fb330e 100644
--- config/config.exs
+++ config/config.exs
@@ -10,10 +10,10 @@ config :sample_app,
   ecto_repos: [SampleApp.Repo]
 
 # Configures the endpoint
-config :sample_app, SampleApp.Web.Endpoint,
+config :sample_app, SampleApp.Endpoint,
   url: [host: "localhost"],
   secret_key_base: "aaaaaaaa",
-  render_errors: [view: SampleApp.Web.ErrorView, accepts: ~w(html json)],
+  render_errors: [view: SampleApp.ErrorView, accepts: ~w(html json)],
   pubsub: [name: SampleApp.PubSub,
            adapter: Phoenix.PubSub.PG2]
 
diff --git config/dev.exs config/dev.exs
index f6c5756..e792ad7 100644
--- config/dev.exs
+++ config/dev.exs
@@ -6,38 +6,23 @@ use Mix.Config
 # The watchers configuration can be used to run external
 # watchers to your application. For example, we use it
 # with brunch.io to recompile .js and .css sources.
-config :sample_app, SampleApp.Web.Endpoint,
+config :sample_app, SampleApp.Endpoint,
   http: [port: 4000],
   debug_errors: true,
   code_reloader: true,
   check_origin: false,
   watchers: [node: ["node_modules/brunch/bin/brunch", "watch", "--stdin",
-                    cd: Path.expand("../assets", __DIR__)]]
+                    cd: Path.expand("../", __DIR__)]]
 
-# ## SSL Support
-#
-# In order to use HTTPS in development, a self-signed
-# certificate can be generated by running the following
-# command from your terminal:
-#
-#     openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -keyout priv/server.key -out priv/server.pem
-#
-# The `http:` config above can be replaced with:
-#
-#     https: [port: 4000, keyfile: "priv/server.key", certfile: "priv/server.pem"],
-#
-# If desired, both `http:` and `https:` keys can be
-# configured to run both http and https servers on
-# different ports.
 
 # Watch static and templates for browser reloading.
-config :sample_app, SampleApp.Web.Endpoint,
+config :sample_app, SampleApp.Endpoint,
   live_reload: [
     patterns: [
       ~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},
       ~r{priv/gettext/.*(po)$},
-      ~r{lib/sample_app/web/views/.*(ex)$},
-      ~r{lib/sample_app/web/templates/.*(eex)$}
+      ~r{web/views/.*(ex)$},
+      ~r{web/templates/.*(eex)$}
     ]
   ]
 
diff --git config/prod.exs config/prod.exs
index 95fb021..00dbb52 100644
--- config/prod.exs
+++ config/prod.exs
@@ -1,22 +1,20 @@
 use Mix.Config
 
-# For production, we often load configuration from external
-# sources, such as your system environment. For this reason,
-# you won't find the :http configuration below, but set inside
-# SampleApp.Web.Endpoint.load_from_system_env/1 dynamically.
-# Any dynamic configuration should be moved to such function.
+# For production, we configure the host to read the PORT
+# from the system environment. Therefore, you will need
+# to set PORT=80 before running your server.
 #
-# Don't forget to configure the url host to something meaningful,
-# Phoenix uses this information when generating URLs.
+# You should also configure the url host to something
+# meaningful, we use this information when generating URLs.
 #
-# Finally, we also include the path to a cache manifest
+# Finally, we also include the path to a manifest
 # containing the digested version of static files. This
 # manifest is generated by the mix phoenix.digest task
 # which you typically run after static files are built.
-config :sample_app, SampleApp.Web.Endpoint,
-  on_init: {Demo.Web.Endpoint, :load_from_system_env, []},
+config :sample_app, SampleApp.Endpoint,
+  http: [port: {:system, "PORT"}],
   url: [host: "example.com", port: 80],
-  cache_static_manifest: "priv/static/cache_manifest.json"
+  cache_static_manifest: "priv/static/manifest.json"
 
 # Do not print debug messages in production
 config :logger, level: :info
@@ -26,11 +24,10 @@ config :logger, level: :info
 # To get SSL working, you will need to add the `https` key
 # to the previous section and set your `:url` port to 443:
 #
-#     config :sample_app, SampleApp.Web.Endpoint,
+#     config :sample_app, SampleApp.Endpoint,
 #       ...
 #       url: [host: "example.com", port: 443],
-#       https: [:inet6,
-#               port: 443,
+#       https: [port: 443,
 #               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
 #               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
 #
@@ -41,7 +38,7 @@ config :logger, level: :info
 # We also recommend setting `force_ssl`, ensuring no data is
 # ever sent via http, always redirecting to https:
 #
-#     config :sample_app, SampleApp.Web.Endpoint,
+#     config :sample_app, SampleApp.Endpoint,
 #       force_ssl: [hsts: true]
 #
 # Check `Plug.SSL` for all available options in `force_ssl`.
@@ -56,7 +53,7 @@ config :logger, level: :info
 # Alternatively, you can configure exactly which server to
 # start per endpoint:
 #
-#     config :sample_app, SampleApp.Web.Endpoint, server: true
+#     config :sample_app, SampleApp.Endpoint, server: true
 #
 
 # Finally import the config/prod.secret.exs
diff --git config/prod.secret.exs config/prod.secret.exs
index ef461fd..6e7580f 100644
--- config/prod.secret.exs
+++ config/prod.secret.exs
@@ -8,7 +8,7 @@ use Mix.Config
 # file or create a script for recreating it, since it's
 # kept out of version control and might be hard to recover
 # or recreate for your teammates (or you later on).
-config :sample_app, SampleApp.Web.Endpoint,
+config :sample_app, SampleApp.Endpoint,
   secret_key_base: "aaaaaaaa"
 
 # Configure your database
@@ -17,4 +17,4 @@ config :sample_app, SampleApp.Repo,
   username: "postgres",
   password: "postgres",
   database: "sample_app_prod",
-  pool_size: 15
+  pool_size: 20
diff --git config/test.exs config/test.exs
index bbcae6f..78f87f6 100644
--- config/test.exs
+++ config/test.exs
@@ -2,7 +2,7 @@ use Mix.Config
 
 # We don't run a server during test. If one is required,
 # you can enable the server option below.
-config :sample_app, SampleApp.Web.Endpoint,
+config :sample_app, SampleApp.Endpoint,
   http: [port: 4001],
   server: false
 
diff --git lib/sample_app/web/endpoint.ex lib/sample_app/endpoint.ex
similarity index 68%
rename from data/sample-app/1.3.0-rc.0/lib/sample_app/web/endpoint.ex
rename to data/sample-app/1.2.4/lib/sample_app/endpoint.ex
index a7bd549..5c56bfa 100644
--- lib/sample_app/web/endpoint.ex
+++ lib/sample_app/endpoint.ex
@@ -1,7 +1,7 @@
-defmodule SampleApp.Web.Endpoint do
+defmodule SampleApp.Endpoint do
   use Phoenix.Endpoint, otp_app: :sample_app
 
-  socket "/socket", SampleApp.Web.UserSocket
+  socket "/socket", SampleApp.UserSocket
 
   # Serve at "/" the static files from "priv/static" directory.
   #
@@ -38,17 +38,5 @@ defmodule SampleApp.Web.Endpoint do
     key: "_sample_app_key",
     signing_salt: "aaaaaaaa"
 
-  plug SampleApp.Web.Router
-
-  @doc """
-  Dynamically loads configuration from the system environment
-  on startup.
-
-  It receives the endpoint configuration from the config files
-  and must return the updated configuration.
-  """
-  def load_from_system_env(config) do
-    port = System.get_env("PORT") || raise "expected the PORT environment variable to be set"
-    {:ok, Keyword.put(config, :http, [:inet6, port: port])}
-  end
+  plug SampleApp.Router
 end
diff --git lib/sample_app/repo.ex lib/sample_app/repo.ex
index 8fdf2d0..37477c1 100644
--- lib/sample_app/repo.ex
+++ lib/sample_app/repo.ex
@@ -1,11 +1,3 @@
 defmodule SampleApp.Repo do
   use Ecto.Repo, otp_app: :sample_app
-
-  @doc """
-  Dynamically loads the repository url from the
-  DATABASE_URL environment variable.
-  """
-  def init(_, opts) do
-    {:ok, Keyword.put(opts, :url, System.get_env("DATABASE_URL"))}
-  end
 end
diff --git lib/sample_app/web/views/layout_view.ex b/data/sample-app/1.3.0-rc.0/lib/sample_app/web/views/layout_view.ex
deleted file mode 100644
index c697ae7..0000000
--- lib/sample_app/web/views/layout_view.ex
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule SampleApp.Web.LayoutView do
-  use SampleApp.Web, :view
-end
diff --git lib/sample_app/web/views/page_view.ex b/data/sample-app/1.3.0-rc.0/lib/sample_app/web/views/page_view.ex
deleted file mode 100644
index ff9ee43..0000000
--- lib/sample_app/web/views/page_view.ex
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule SampleApp.Web.PageView do
-  use SampleApp.Web, :view
-end
diff --git lib/sample_app/application.ex lib/sample_app.ex
similarity index 73%
rename from data/sample-app/1.3.0-rc.0/lib/sample_app/application.ex
rename to data/sample-app/1.2.4/lib/sample_app.ex
index c354fc6..73c748b 100644
--- lib/sample_app/application.ex
+++ lib/sample_app.ex
@@ -1,4 +1,4 @@
-defmodule SampleApp.Application do
+defmodule SampleApp do
   use Application
 
   # See http://elixir-lang.org/docs/stable/elixir/Application.html
@@ -11,7 +11,7 @@ defmodule SampleApp.Application do
       # Start the Ecto repository
       supervisor(SampleApp.Repo, []),
       # Start the endpoint when the application starts
-      supervisor(SampleApp.Web.Endpoint, []),
+      supervisor(SampleApp.Endpoint, []),
       # Start your own worker by calling: SampleApp.Worker.start_link(arg1, arg2, arg3)
       # worker(SampleApp.Worker, [arg1, arg2, arg3]),
     ]
@@ -21,4 +21,11 @@ defmodule SampleApp.Application do
     opts = [strategy: :one_for_one, name: SampleApp.Supervisor]
     Supervisor.start_link(children, opts)
   end
+
+  # Tell Phoenix to update the endpoint configuration
+  # whenever the application is updated.
+  def config_change(changed, _new, removed) do
+    SampleApp.Endpoint.config_change(changed, removed)
+    :ok
+  end
 end
diff --git mix.exs mix.exs
index 4a926c8..6cdd934 100644
--- mix.exs
+++ mix.exs
@@ -4,7 +4,7 @@ defmodule SampleApp.Mixfile do
   def project do
     [app: :sample_app,
      version: "0.0.1",
-     elixir: "~> 1.4",
+     elixir: "~> 1.2",
      elixirc_paths: elixirc_paths(Mix.env),
      compilers: [:phoenix, :gettext] ++ Mix.compilers,
      build_embedded: Mix.env == :prod,
@@ -17,21 +17,22 @@ defmodule SampleApp.Mixfile do
   #
   # Type `mix help compile.app` for more information.
   def application do
-    [mod: {SampleApp.Application, []},
-     extra_applications: [:logger]]
+    [mod: {SampleApp, []},
+     applications: [:phoenix, :phoenix_pubsub, :phoenix_html, :cowboy, :logger, :gettext,
+                    :phoenix_ecto, :postgrex]]
   end
 
   # Specifies which paths to compile per environment.
-  defp elixirc_paths(:test), do: ["lib", "test/support"]
-  defp elixirc_paths(_),     do: ["lib"]
+  defp elixirc_paths(:test), do: ["lib", "web", "test/support"]
+  defp elixirc_paths(_),     do: ["lib", "web"]
 
   # Specifies your project dependencies.
   #
   # Type `mix help deps` for examples and options.
   defp deps do
-    [{:phoenix, "~> 1.3.0-rc"},
+    [{:phoenix, "~> 1.2.4"},
      {:phoenix_pubsub, "~> 1.0"},
-     {:phoenix_ecto, "~> 3.2"},
+     {:phoenix_ecto, "~> 3.0"},
      {:postgrex, ">= 0.0.0"},
      {:phoenix_html, "~> 2.6"},
      {:phoenix_live_reload, "~> 1.0", only: :dev},
diff --git a/data/sample-app/1.2.4/package.json package.json
new file mode 100644
index 0000000..13de858
--- /dev/null
+++ package.json
@@ -0,0 +1,20 @@
+{
+  "repository": {},
+  "license": "MIT",
+  "scripts": {
+    "deploy": "brunch build --production",
+    "watch": "brunch watch --stdin"
+  },
+  "dependencies": {
+    "phoenix": "file:deps/phoenix",
+    "phoenix_html": "file:deps/phoenix_html"
+  },
+  "devDependencies": {
+    "babel-brunch": "~6.0.0",
+    "brunch": "2.7.4",
+    "clean-css-brunch": "~2.0.0",
+    "css-brunch": "~2.0.0",
+    "javascript-brunch": "~2.0.0",
+    "uglify-js-brunch": "~2.0.1"
+  }
+}
diff --git priv/gettext/en/LC_MESSAGES/errors.po priv/gettext/en/LC_MESSAGES/errors.po
index 2211c98..087d374 100644
--- priv/gettext/en/LC_MESSAGES/errors.po
+++ priv/gettext/en/LC_MESSAGES/errors.po
@@ -39,10 +39,10 @@ msgid "does not match confirmation"
 msgstr ""
 
 ## From Ecto.Changeset.no_assoc_constraint/3
-msgid "is still associated with this entry"
+msgid "is still associated to this entry"
 msgstr ""
 
-msgid "are still associated with this entry"
+msgid "are still associated to this entry"
 msgstr ""
 
 ## From Ecto.Changeset.validate_length/3
diff --git priv/gettext/errors.pot priv/gettext/errors.pot
index a964f84..a228957 100644
--- priv/gettext/errors.pot
+++ priv/gettext/errors.pot
@@ -37,10 +37,10 @@ msgid "does not match confirmation"
 msgstr ""
 
 ## From Ecto.Changeset.no_assoc_constraint/3
-msgid "is still associated with this entry"
+msgid "is still associated to this entry"
 msgstr ""
 
-msgid "are still associated with this entry"
+msgid "are still associated to this entry"
 msgstr ""
 
 ## From Ecto.Changeset.validate_length/3
diff --git priv/repo/seeds.exs priv/repo/seeds.exs
index 390853d..c4de0ce 100644
--- priv/repo/seeds.exs
+++ priv/repo/seeds.exs
@@ -5,7 +5,7 @@
 # Inside the script, you can read and write to any of your
 # repositories directly:
 #
-#     SampleApp.Repo.insert!(%SampleApp.SomeSchema{})
+#     SampleApp.Repo.insert!(%SampleApp.SomeModel{})
 #
 # We recommend using the bang functions (`insert!`, `update!`
 # and so on) as they will fail if something goes wrong.
diff --git test/web/controllers/page_controller_test.exs test/controllers/page_controller_test.exs
similarity index 63%
rename from data/sample-app/1.3.0-rc.0/test/web/controllers/page_controller_test.exs
rename to data/sample-app/1.2.4/test/controllers/page_controller_test.exs
index 9ef8fcd..f8a7ee8 100644
--- test/web/controllers/page_controller_test.exs
+++ test/controllers/page_controller_test.exs
@@ -1,5 +1,5 @@
-defmodule SampleApp.Web.PageControllerTest do
-  use SampleApp.Web.ConnCase
+defmodule SampleApp.PageControllerTest do
+  use SampleApp.ConnCase
 
   test "GET /", %{conn: conn} do
     conn = get conn, "/"
diff --git test/support/channel_case.ex test/support/channel_case.ex
index 3852306..a3e80de 100644
--- test/support/channel_case.ex
+++ test/support/channel_case.ex
@@ -1,11 +1,11 @@
-defmodule SampleApp.Web.ChannelCase do
+defmodule SampleApp.ChannelCase do
   @moduledoc """
   This module defines the test case to be used by
   channel tests.
 
   Such tests rely on `Phoenix.ChannelTest` and also
   import other functionality to make it easier
-  to build common datastructures and query the data layer.
+  to build and query models.
 
   Finally, if the test case interacts with the database,
   it cannot be async. For this reason, every test runs
@@ -20,18 +20,24 @@ defmodule SampleApp.Web.ChannelCase do
       # Import conveniences for testing with channels
       use Phoenix.ChannelTest
 
+      alias SampleApp.Repo
+      import Ecto
+      import Ecto.Changeset
+      import Ecto.Query
+
+
       # The default endpoint for testing
-      @endpoint SampleApp.Web.Endpoint
+      @endpoint SampleApp.Endpoint
     end
   end
 
-
   setup tags do
     :ok = Ecto.Adapters.SQL.Sandbox.checkout(SampleApp.Repo)
+
     unless tags[:async] do
       Ecto.Adapters.SQL.Sandbox.mode(SampleApp.Repo, {:shared, self()})
     end
+
     :ok
   end
-
 end
diff --git test/support/conn_case.ex test/support/conn_case.ex
index 6cbddf0..062c0fb 100644
--- test/support/conn_case.ex
+++ test/support/conn_case.ex
@@ -1,11 +1,11 @@
-defmodule SampleApp.Web.ConnCase do
+defmodule SampleApp.ConnCase do
   @moduledoc """
   This module defines the test case to be used by
   tests that require setting up a connection.
 
   Such tests rely on `Phoenix.ConnTest` and also
   import other functionality to make it easier
-  to build common datastructures and query the data layer.
+  to build and query models.
 
   Finally, if the test case interacts with the database,
   it cannot be async. For this reason, every test runs
@@ -19,20 +19,26 @@ defmodule SampleApp.Web.ConnCase do
     quote do
       # Import conveniences for testing with connections
       use Phoenix.ConnTest
-      import SampleApp.Web.Router.Helpers
+
+      alias SampleApp.Repo
+      import Ecto
+      import Ecto.Changeset
+      import Ecto.Query
+
+      import SampleApp.Router.Helpers
 
       # The default endpoint for testing
-      @endpoint SampleApp.Web.Endpoint
+      @endpoint SampleApp.Endpoint
     end
   end
 
-
   setup tags do
     :ok = Ecto.Adapters.SQL.Sandbox.checkout(SampleApp.Repo)
+
     unless tags[:async] do
       Ecto.Adapters.SQL.Sandbox.mode(SampleApp.Repo, {:shared, self()})
     end
+
     {:ok, conn: Phoenix.ConnTest.build_conn()}
   end
-
 end
diff --git test/support/data_case.ex b/data/sample-app/1.3.0-rc.0/test/support/data_case.ex
deleted file mode 100644
index d409a4c..0000000
--- test/support/data_case.ex
+++ /dev/null
@@ -1,53 +0,0 @@
-defmodule SampleApp.DataCase do
-  @moduledoc """
-  This module defines the setup for tests requiring
-  access to the application's data layer.
-
-  You may define functions here to be used as helpers in
-  your tests.
-
-  Finally, if the test case interacts with the database,
-  it cannot be async. For this reason, every test runs
-  inside a transaction which is reset at the beginning
-  of the test unless the test case is marked as async.
-  """
-
-  use ExUnit.CaseTemplate
-
-  using do
-    quote do
-      alias SampleApp.Repo
-
-      import Ecto
-      import Ecto.Changeset
-      import Ecto.Query
-      import SampleApp.DataCase
-    end
-  end
-
-  setup tags do
-    :ok = Ecto.Adapters.SQL.Sandbox.checkout(SampleApp.Repo)
-
-    unless tags[:async] do
-      Ecto.Adapters.SQL.Sandbox.mode(SampleApp.Repo, {:shared, self()})
-    end
-
-    :ok
-  end
-
-  @doc """
-  A helper that converts the changeset error messages
-  for a given field into a list of strings for assertion:
-
-      changeset = Blog.create_user(%{password: "short"})
-      assert "password is too short" in errors_on(changeset, :password)
-
-  """
-  def errors_on(changeset, field) do
-    for {message, opts} <- Keyword.get_values(changeset.errors, field) do
-      Enum.reduce(opts, message, fn {key, value}, acc ->
-        String.replace(acc, "%{#{key}}", to_string(value))
-      end)
-    end
-  end
-end
diff --git a/data/sample-app/1.2.4/test/support/model_case.ex test/support/model_case.ex
new file mode 100644
index 0000000..f459d48
--- /dev/null
+++ test/support/model_case.ex
@@ -0,0 +1,65 @@
+defmodule SampleApp.ModelCase do
+  @moduledoc """
+  This module defines the test case to be used by
+  model tests.
+
+  You may define functions here to be used as helpers in
+  your model tests. See `errors_on/2`'s definition as reference.
+
+  Finally, if the test case interacts with the database,
+  it cannot be async. For this reason, every test runs
+  inside a transaction which is reset at the beginning
+  of the test unless the test case is marked as async.
+  """
+
+  use ExUnit.CaseTemplate
+
+  using do
+    quote do
+      alias SampleApp.Repo
+
+      import Ecto
+      import Ecto.Changeset
+      import Ecto.Query
+      import SampleApp.ModelCase
+    end
+  end
+
+  setup tags do
+    :ok = Ecto.Adapters.SQL.Sandbox.checkout(SampleApp.Repo)
+
+    unless tags[:async] do
+      Ecto.Adapters.SQL.Sandbox.mode(SampleApp.Repo, {:shared, self()})
+    end
+
+    :ok
+  end
+
+  @doc """
+  Helper for returning list of errors in a struct when given certain data.
+
+  ## Examples
+
+  Given a User schema that lists `:name` as a required field and validates
+  `:password` to be safe, it would return:
+
+      iex> errors_on(%User{}, %{password: "password"})
+      [password: "is unsafe", name: "is blank"]
+
+  You could then write your assertion like:
+
+      assert {:password, "is unsafe"} in errors_on(%User{}, %{password: "password"})
+
+  You can also create the changeset manually and retrieve the errors
+  field directly:
+
+      iex> changeset = User.changeset(%User{}, password: "password")
+      iex> {:password, "is unsafe"} in changeset.errors
+      true
+  """
+  def errors_on(struct, data) do
+    struct.__struct__.changeset(struct, data)
+    |> Ecto.Changeset.traverse_errors(&SampleApp.ErrorHelpers.translate_error/1)
+    |> Enum.flat_map(fn {key, errors} -> for msg <- errors, do: {key, msg} end)
+  end
+end
diff --git test/test_helper.exs test/test_helper.exs
index 11eb15b..81c494a 100644
--- test/test_helper.exs
+++ test/test_helper.exs
@@ -1,4 +1,4 @@
-ExUnit.start()
+ExUnit.start
 
 Ecto.Adapters.SQL.Sandbox.mode(SampleApp.Repo, :manual)
 
diff --git test/web/views/error_view_test.exs test/views/error_view_test.exs
similarity index 50%
rename from data/sample-app/1.3.0-rc.0/test/web/views/error_view_test.exs
rename to data/sample-app/1.2.4/test/views/error_view_test.exs
index 19b51ac..629fd9a 100644
--- test/web/views/error_view_test.exs
+++ test/views/error_view_test.exs
@@ -1,21 +1,21 @@
-defmodule SampleApp.Web.ErrorViewTest do
-  use SampleApp.Web.ConnCase, async: true
+defmodule SampleApp.ErrorViewTest do
+  use SampleApp.ConnCase, async: true
 
   # Bring render/3 and render_to_string/3 for testing custom views
   import Phoenix.View
 
   test "renders 404.html" do
-    assert render_to_string(SampleApp.Web.ErrorView, "404.html", []) ==
+    assert render_to_string(SampleApp.ErrorView, "404.html", []) ==
            "Page not found"
   end
 
   test "render 500.html" do
-    assert render_to_string(SampleApp.Web.ErrorView, "500.html", []) ==
+    assert render_to_string(SampleApp.ErrorView, "500.html", []) ==
            "Internal server error"
   end
 
   test "render any other" do
-    assert render_to_string(SampleApp.Web.ErrorView, "505.html", []) ==
+    assert render_to_string(SampleApp.ErrorView, "505.html", []) ==
            "Internal server error"
   end
 end
diff --git a/data/sample-app/1.2.4/test/views/layout_view_test.exs test/views/layout_view_test.exs
new file mode 100644
index 0000000..8a5fe85
--- /dev/null
+++ test/views/layout_view_test.exs
@@ -0,0 +1,3 @@
+defmodule SampleApp.LayoutViewTest do
+  use SampleApp.ConnCase, async: true
+end
diff --git a/data/sample-app/1.2.4/test/views/page_view_test.exs test/views/page_view_test.exs
new file mode 100644
index 0000000..79c5e76
--- /dev/null
+++ test/views/page_view_test.exs
@@ -0,0 +1,3 @@
+defmodule SampleApp.PageViewTest do
+  use SampleApp.ConnCase, async: true
+end
diff --git test/web/views/layout_view_test.exs b/data/sample-app/1.3.0-rc.0/test/web/views/layout_view_test.exs
deleted file mode 100644
index 62508b6..0000000
--- test/web/views/layout_view_test.exs
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule SampleApp.Web.LayoutViewTest do
-  use SampleApp.Web.ConnCase, async: true
-end
diff --git test/web/views/page_view_test.exs b/data/sample-app/1.3.0-rc.0/test/web/views/page_view_test.exs
deleted file mode 100644
index d04cf07..0000000
--- test/web/views/page_view_test.exs
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule SampleApp.Web.PageViewTest do
-  use SampleApp.Web.ConnCase, async: true
-end
diff --git lib/sample_app/web/channels/user_socket.ex web/channels/user_socket.ex
similarity index 79%
rename from data/sample-app/1.3.0-rc.0/lib/sample_app/web/channels/user_socket.ex
rename to data/sample-app/1.2.4/web/channels/user_socket.ex
index 074b2b5..e55ebb8 100644
--- lib/sample_app/web/channels/user_socket.ex
+++ web/channels/user_socket.ex
@@ -1,8 +1,8 @@
-defmodule SampleApp.Web.UserSocket do
+defmodule SampleApp.UserSocket do
   use Phoenix.Socket
 
   ## Channels
-  # channel "room:*", SampleApp.Web.RoomChannel
+  # channel "room:*", SampleApp.RoomChannel
 
   ## Transports
   transport :websocket, Phoenix.Transports.WebSocket
@@ -25,12 +25,12 @@ defmodule SampleApp.Web.UserSocket do
 
   # Socket id's are topics that allow you to identify all sockets for a given user:
   #
-  #     def id(socket), do: "user_socket:#{socket.assigns.user_id}"
+  #     def id(socket), do: "users_socket:#{socket.assigns.user_id}"
   #
   # Would allow you to broadcast a "disconnect" event and terminate
   # all active sockets and channels for a given user:
   #
-  #     SampleApp.Web.Endpoint.broadcast("user_socket:#{user.id}", "disconnect", %{})
+  #     SampleApp.Endpoint.broadcast("users_socket:#{user.id}", "disconnect", %{})
   #
   # Returning `nil` makes this socket anonymous.
   def id(_socket), do: nil
diff --git lib/sample_app/web/controllers/page_controller.ex web/controllers/page_controller.ex
similarity index 71%
rename from data/sample-app/1.3.0-rc.0/lib/sample_app/web/controllers/page_controller.ex
rename to data/sample-app/1.2.4/web/controllers/page_controller.ex
index e9ed2bf..9d01363 100644
--- lib/sample_app/web/controllers/page_controller.ex
+++ web/controllers/page_controller.ex
@@ -1,4 +1,4 @@
-defmodule SampleApp.Web.PageController do
+defmodule SampleApp.PageController do
   use SampleApp.Web, :controller
 
   def index(conn, _params) do
diff --git lib/sample_app/web/gettext.ex web/gettext.ex
similarity index 90%
rename from data/sample-app/1.3.0-rc.0/lib/sample_app/web/gettext.ex
rename to data/sample-app/1.2.4/web/gettext.ex
index f88b4c0..0f797cd 100644
--- lib/sample_app/web/gettext.ex
+++ web/gettext.ex
@@ -1,11 +1,11 @@
-defmodule SampleApp.Web.Gettext do
+defmodule SampleApp.Gettext do
   @moduledoc """
   A module providing Internationalization with a gettext-based API.
 
   By using [Gettext](https://hexdocs.pm/gettext),
   your module gains a set of macros for translations, for example:
 
-      import SampleApp.Web.Gettext
+      import SampleApp.Gettext
 
       # Simple translation
       gettext "Here is the string to translate"
diff --git lib/sample_app/web/router.ex web/router.ex
similarity index 81%
rename from data/sample-app/1.3.0-rc.0/lib/sample_app/web/router.ex
rename to data/sample-app/1.2.4/web/router.ex
index fe0f0ac..de84255 100644
--- lib/sample_app/web/router.ex
+++ web/router.ex
@@ -1,4 +1,4 @@
-defmodule SampleApp.Web.Router do
+defmodule SampleApp.Router do
   use SampleApp.Web, :router
 
   pipeline :browser do
@@ -13,14 +13,14 @@ defmodule SampleApp.Web.Router do
     plug :accepts, ["json"]
   end
 
-  scope "/", SampleApp.Web do
+  scope "/", SampleApp do
     pipe_through :browser # Use the default browser stack
 
     get "/", PageController, :index
   end
 
   # Other scopes may use custom stacks.
-  # scope "/api", SampleApp.Web do
+  # scope "/api", SampleApp do
   #   pipe_through :api
   # end
 end
diff --git assets/static/favicon.ico web/static/assets/favicon.ico
similarity index 100%
rename from data/sample-app/1.3.0-rc.0/assets/static/favicon.ico
rename to data/sample-app/1.2.4/web/static/assets/favicon.ico
diff --git assets/static/images/phoenix.png web/static/assets/images/phoenix.png
similarity index 100%
rename from data/sample-app/1.3.0-rc.0/assets/static/images/phoenix.png
rename to data/sample-app/1.2.4/web/static/assets/images/phoenix.png
diff --git assets/static/robots.txt web/static/assets/robots.txt
similarity index 100%
rename from data/sample-app/1.3.0-rc.0/assets/static/robots.txt
rename to data/sample-app/1.2.4/web/static/assets/robots.txt
diff --git assets/css/app.css web/static/css/app.css
similarity index 100%
rename from data/sample-app/1.3.0-rc.0/assets/css/app.css
rename to data/sample-app/1.2.4/web/static/css/app.css
diff --git assets/css/phoenix.css web/static/css/phoenix.css
similarity index 100%
rename from data/sample-app/1.3.0-rc.0/assets/css/phoenix.css
rename to data/sample-app/1.2.4/web/static/css/phoenix.css
diff --git assets/js/app.js web/static/js/app.js
similarity index 100%
rename from data/sample-app/1.3.0-rc.0/assets/js/app.js
rename to data/sample-app/1.2.4/web/static/js/app.js
diff --git assets/js/socket.js web/static/js/socket.js
similarity index 88%
rename from data/sample-app/1.3.0-rc.0/assets/js/socket.js
rename to data/sample-app/1.2.4/web/static/js/socket.js
index 5c23a67..0f8d461 100644
--- assets/js/socket.js
+++ web/static/js/socket.js
@@ -1,8 +1,8 @@
 // NOTE: The contents of this file will only be executed if
-// you uncomment its entry in "assets/js/app.js".
+// you uncomment its entry in "web/static/js/app.js".
 
 // To use Phoenix channels, the first step is to import Socket
-// and connect at the socket path in "lib/web/endpoint.ex":
+// and connect at the socket path in "lib/my_app/endpoint.ex":
 import {Socket} from "phoenix"
 
 let socket = new Socket("/socket", {params: {token: window.userToken}})
@@ -13,7 +13,7 @@ let socket = new Socket("/socket", {params: {token: window.userToken}})
 // If the current user exists you can assign the user's token in
 // the connection for use in the layout.
 //
-// In your "lib/web/router.ex":
+// In your "web/router.ex":
 //
 //     pipeline :browser do
 //       ...
@@ -31,12 +31,12 @@ let socket = new Socket("/socket", {params: {token: window.userToken}})
 //     end
 //
 // Now you need to pass this token to JavaScript. You can do so
-// inside a script tag in "lib/web/templates/layout/app.html.eex":
+// inside a script tag in "web/templates/layout/app.html.eex":
 //
 //     <script>window.userToken = "<%= assigns[:user_token] %>";</script>
 //
 // You will need to verify the user token in the "connect/2" function
-// in "lib/web/channels/user_socket.ex":
+// in "web/channels/user_socket.ex":
 //
 //     def connect(%{"token" => token}, socket) do
 //       # max_age: 1209600 is equivalent to two weeks in seconds
diff --git lib/sample_app/web/templates/layout/app.html.eex web/templates/layout/app.html.eex
similarity index 100%
rename from data/sample-app/1.3.0-rc.0/lib/sample_app/web/templates/layout/app.html.eex
rename to data/sample-app/1.2.4/web/templates/layout/app.html.eex
diff --git lib/sample_app/web/templates/page/index.html.eex web/templates/page/index.html.eex
similarity index 93%
rename from data/sample-app/1.3.0-rc.0/lib/sample_app/web/templates/page/index.html.eex
rename to data/sample-app/1.2.4/web/templates/page/index.html.eex
index 0988ea5..8ff4b81 100644
--- lib/sample_app/web/templates/page/index.html.eex
+++ web/templates/page/index.html.eex
@@ -1,5 +1,5 @@
 <div class="jumbotron">
-  <h2><%= gettext "Welcome to %{name}!", name: "Phoenix" %></h2>
+  <h2><%= gettext "Welcome to %{name}", name: "Phoenix!" %></h2>
   <p class="lead">A productive web framework that<br />does not compromise speed and maintainability.</p>
 </div>
 
diff --git lib/sample_app/web/views/error_helpers.ex web/views/error_helpers.ex
similarity index 84%
rename from data/sample-app/1.3.0-rc.0/lib/sample_app/web/views/error_helpers.ex
rename to data/sample-app/1.2.4/web/views/error_helpers.ex
index 0a568ad..6c414da 100644
--- lib/sample_app/web/views/error_helpers.ex
+++ web/views/error_helpers.ex
@@ -1,4 +1,4 @@
-defmodule SampleApp.Web.ErrorHelpers do
+defmodule SampleApp.ErrorHelpers do
   @moduledoc """
   Conveniences for translating and building error messages.
   """
@@ -32,9 +32,9 @@ defmodule SampleApp.Web.ErrorHelpers do
     #     dgettext "errors", "is invalid"
     #
     if count = opts[:count] do
-      Gettext.dngettext(SampleApp.Web.Gettext, "errors", msg, msg, count, opts)
+      Gettext.dngettext(SampleApp.Gettext, "errors", msg, msg, count, opts)
     else
-      Gettext.dgettext(SampleApp.Web.Gettext, "errors", msg, opts)
+      Gettext.dgettext(SampleApp.Gettext, "errors", msg, opts)
     end
   end
 end
diff --git lib/sample_app/web/views/error_view.ex web/views/error_view.ex
similarity index 90%
rename from data/sample-app/1.3.0-rc.0/lib/sample_app/web/views/error_view.ex
rename to data/sample-app/1.2.4/web/views/error_view.ex
index 5670e83..2defef3 100644
--- lib/sample_app/web/views/error_view.ex
+++ web/views/error_view.ex
@@ -1,4 +1,4 @@
-defmodule SampleApp.Web.ErrorView do
+defmodule SampleApp.ErrorView do
   use SampleApp.Web, :view
 
   def render("404.html", _assigns) do
diff --git a/data/sample-app/1.2.4/web/views/layout_view.ex web/views/layout_view.ex
new file mode 100644
index 0000000..34d43b9
--- /dev/null
+++ web/views/layout_view.ex
@@ -0,0 +1,3 @@
+defmodule SampleApp.LayoutView do
+  use SampleApp.Web, :view
+end
diff --git a/data/sample-app/1.2.4/web/views/page_view.ex web/views/page_view.ex
new file mode 100644
index 0000000..2f3b960
--- /dev/null
+++ web/views/page_view.ex
@@ -0,0 +1,3 @@
+defmodule SampleApp.PageView do
+  use SampleApp.Web, :view
+end
diff --git lib/sample_app/web/web.ex web/web.ex
similarity index 65%
rename from data/sample-app/1.3.0-rc.0/lib/sample_app/web/web.ex
rename to data/sample-app/1.2.4/web/web.ex
index a706482..c071d6e 100644
--- lib/sample_app/web/web.ex
+++ web/web.ex
@@ -16,19 +16,32 @@ defmodule SampleApp.Web do
   below.
   """
 
+  def model do
+    quote do
+      use Ecto.Schema
+
+      import Ecto
+      import Ecto.Changeset
+      import Ecto.Query
+    end
+  end
+
   def controller do
     quote do
-      use Phoenix.Controller, namespace: SampleApp.Web
-      import Plug.Conn
-      import SampleApp.Web.Router.Helpers
-      import SampleApp.Web.Gettext
+      use Phoenix.Controller
+
+      alias SampleApp.Repo
+      import Ecto
+      import Ecto.Query
+
+      import SampleApp.Router.Helpers
+      import SampleApp.Gettext
     end
   end
 
   def view do
     quote do
-      use Phoenix.View, root: "lib/sample_app/web/templates",
-                        namespace: SampleApp.Web
+      use Phoenix.View, root: "web/templates"
 
       # Import convenience functions from controllers
       import Phoenix.Controller, only: [get_csrf_token: 0, get_flash: 2, view_module: 1]
@@ -36,24 +49,26 @@ defmodule SampleApp.Web do
       # Use all HTML functionality (forms, tags, etc)
       use Phoenix.HTML
 
-      import SampleApp.Web.Router.Helpers
-      import SampleApp.Web.ErrorHelpers
-      import SampleApp.Web.Gettext
+      import SampleApp.Router.Helpers
+      import SampleApp.ErrorHelpers
+      import SampleApp.Gettext
     end
   end
 
   def router do
     quote do
       use Phoenix.Router
-      import Plug.Conn
-      import Phoenix.Controller
     end
   end
 
   def channel do
     quote do
       use Phoenix.Channel
-      import SampleApp.Web.Gettext
+
+      alias SampleApp.Repo
+      import Ecto
+      import Ecto.Query
+      import SampleApp.Gettext
     end
   end
 
