diff --git .gitignore .gitignore
index 0a63252..d5be28f 100644
--- .gitignore
+++ .gitignore
@@ -4,21 +4,24 @@
 /deps
 /*.ez
 
-# Generate on crash by the VM
+# Generated on crash by the VM
 erl_crash.dump
 
+# Generated on crash by NPM
+npm-debug.log
+
 # Static artifacts
-/node_modules
+/assets/node_modules
 
-# Since we are building assets from web/static,
+# Since we are building assets from assets/,
 # we ignore priv/static. You may want to comment
 # this depending on your deployment strategy.
 /priv/static/
 
-# The config/prod.secret.exs file by default contains sensitive
-# data and you should not commit it into version control.
+# Files matching config/*.secret.exs pattern contain sensitive
+# data and you should not commit them into version control.
 #
 # Alternatively, you may comment the line below and commit the
-# secrets file as long as you replace its contents by environment
+# secrets files as long as you replace their contents by environment
 # variables.
-/config/prod.secret.exs
+/config/*.secret.exs
\ No newline at end of file
diff --git README.md README.md
index 61e4830..d5e898e 100644
--- README.md
+++ README.md
@@ -1,10 +1,11 @@
 # SampleApp
 
-To start your Phoenix app:
+To start your Phoenix server:
 
-  1. Install dependencies with `mix deps.get`
-  2. Create and migrate your database with `mix ecto.create && mix ecto.migrate`
-  3. Start Phoenix endpoint with `mix phoenix.server`
+  * Install dependencies with `mix deps.get`
+  * Create and migrate your database with `mix ecto.create && mix ecto.migrate`
+  * Install Node.js dependencies with `cd assets && npm install`
+  * Start Phoenix endpoint with `mix phx.server`
 
 Now you can visit [`localhost:4000`](http://localhost:4000) from your browser.
 
@@ -14,6 +15,6 @@ Ready to run in production? Please [check our deployment guides](http://www.phoe
 
   * Official website: http://www.phoenixframework.org/
   * Guides: http://phoenixframework.org/docs/overview
-  * Docs: http://hexdocs.pm/phoenix
+  * Docs: https://hexdocs.pm/phoenix
   * Mailing list: http://groups.google.com/group/phoenix-talk
   * Source: https://github.com/phoenixframework/phoenix
diff --git brunch-config.js assets/brunch-config.js
similarity index 53%
rename from data/sample-app/1.1.2/brunch-config.js
rename to data/sample-app/1.3.4/assets/brunch-config.js
index d3999c9..b15df46 100644
--- brunch-config.js
+++ assets/brunch-config.js
@@ -5,18 +5,17 @@ exports.config = {
       joinTo: "js/app.js"
 
       // To use a separate vendor.js bundle, specify two files path
-      // https://github.com/brunch/brunch/blob/stable/docs/config.md#files
+      // http://brunch.io/docs/config#-files-
       // joinTo: {
-      //  "js/app.js": /^(web\/static\/js)/,
-      //  "js/vendor.js": /^(web\/static\/vendor)|(deps)/
+      //   "js/app.js": /^js/,
+      //   "js/vendor.js": /^(?!js)/
       // }
       //
       // To change the order of concatenation of files, explicitly mention here
-      // https://github.com/brunch/brunch/tree/master/docs#concatenation
       // order: {
       //   before: [
-      //     "web/static/vendor/js/jquery-2.1.1.js",
-      //     "web/static/vendor/js/bootstrap.min.js"
+      //     "vendor/js/jquery-2.1.1.js",
+      //     "vendor/js/bootstrap.min.js"
       //   ]
       // }
     },
@@ -30,41 +29,34 @@ exports.config = {
 
   conventions: {
     // This option sets where we should place non-css and non-js assets in.
-    // By default, we set this to "/web/static/assets". Files in this directory
+    // By default, we set this to "/assets/static". Files in this directory
     // will be copied to `paths.public`, which is "priv/static" by default.
-    assets: /^(web\/static\/assets)/
+    assets: /^(static)/
   },
 
   // Phoenix paths configuration
   paths: {
     // Dependencies and current project directories to watch
-    watched: [
-      "web/static",
-      "test/static"
-    ],
-
+    watched: ["static", "css", "js", "vendor"],
     // Where to compile files to
-    public: "priv/static"
+    public: "../priv/static"
   },
 
   // Configure your plugins
   plugins: {
     babel: {
       // Do not use ES6 compiler in vendor code
-      ignore: [/web\/static\/vendor/]
+      ignore: [/vendor/]
     }
   },
 
   modules: {
     autoRequire: {
-      "js/app.js": ["web/static/js/app"]
+      "js/app.js": ["js/app"]
     }
   },
 
   npm: {
-    enabled: true,
-    // Whitelist the npm deps to be pulled in as front-end assets.
-    // All other deps in package.json will be excluded from the bundle.
-    whitelist: ["phoenix", "phoenix_html"]
+    enabled: true
   }
 };
diff --git a/data/sample-app/1.3.4/assets/css/app.css assets/css/app.css
new file mode 100644
index 0000000..5314c34
--- /dev/null
+++ assets/css/app.css
@@ -0,0 +1 @@
+/* This file is for your main application css. */
\ No newline at end of file
diff --git web/static/css/app.css assets/css/phoenix.css
similarity index 99%
rename from data/sample-app/1.1.2/web/static/css/app.css
rename to data/sample-app/1.3.4/assets/css/phoenix.css
index 36302ee..0b406d7 100644
--- web/static/css/app.css
+++ assets/css/phoenix.css
@@ -1,3 +1,7 @@
+/* Includes Bootstrap as well as some default style for the starter
+ * application. This can be safely deleted to start fresh.
+ */
+
 /*!
  * Bootstrap v3.3.5 (http://getbootstrap.com)
  * Copyright 2011-2015 Twitter, Inc.
@@ -13,11 +17,6 @@ body, form, ul, table {
 /* Phoenix flash messages */
 .alert:empty { display: none; }
 
-/* Phoenix inline forms in links and buttons */
-form.link, form.button {
-  display: inline;
-}
-
 /* Custom page header */
 .header {
   border-bottom: 1px solid #e5e5e5;
@@ -75,4 +74,4 @@ form.link, form.button {
   .jumbotron {
     border-bottom: 0;
   }
-}
+}
\ No newline at end of file
diff --git web/static/js/app.js assets/js/app.js
similarity index 100%
rename from data/sample-app/1.1.2/web/static/js/app.js
rename to data/sample-app/1.3.4/assets/js/app.js
diff --git web/static/js/socket.js assets/js/socket.js
similarity index 88%
rename from data/sample-app/1.1.2/web/static/js/socket.js
rename to data/sample-app/1.3.4/assets/js/socket.js
index 0f8d461..5c23a67 100644
--- web/static/js/socket.js
+++ assets/js/socket.js
@@ -1,8 +1,8 @@
 // NOTE: The contents of this file will only be executed if
-// you uncomment its entry in "web/static/js/app.js".
+// you uncomment its entry in "assets/js/app.js".
 
 // To use Phoenix channels, the first step is to import Socket
-// and connect at the socket path in "lib/my_app/endpoint.ex":
+// and connect at the socket path in "lib/web/endpoint.ex":
 import {Socket} from "phoenix"
 
 let socket = new Socket("/socket", {params: {token: window.userToken}})
@@ -13,7 +13,7 @@ let socket = new Socket("/socket", {params: {token: window.userToken}})
 // If the current user exists you can assign the user's token in
 // the connection for use in the layout.
 //
-// In your "web/router.ex":
+// In your "lib/web/router.ex":
 //
 //     pipeline :browser do
 //       ...
@@ -31,12 +31,12 @@ let socket = new Socket("/socket", {params: {token: window.userToken}})
 //     end
 //
 // Now you need to pass this token to JavaScript. You can do so
-// inside a script tag in "web/templates/layout/app.html.eex":
+// inside a script tag in "lib/web/templates/layout/app.html.eex":
 //
 //     <script>window.userToken = "<%= assigns[:user_token] %>";</script>
 //
 // You will need to verify the user token in the "connect/2" function
-// in "web/channels/user_socket.ex":
+// in "lib/web/channels/user_socket.ex":
 //
 //     def connect(%{"token" => token}, socket) do
 //       # max_age: 1209600 is equivalent to two weeks in seconds
diff --git a/data/sample-app/1.3.4/assets/package.json assets/package.json
new file mode 100644
index 0000000..4cc3986
--- /dev/null
+++ assets/package.json
@@ -0,0 +1,18 @@
+{
+  "repository": {},
+  "license": "MIT",
+  "scripts": {
+    "deploy": "brunch build --production",
+    "watch": "brunch watch --stdin"
+  },
+  "dependencies": {
+    "phoenix": "file:../deps/phoenix",
+    "phoenix_html": "file:../deps/phoenix_html"
+  },
+  "devDependencies": {
+    "babel-brunch": "6.1.1",
+    "brunch": "2.10.9",
+    "clean-css-brunch": "2.10.0",
+    "uglify-js-brunch": "2.10.0"
+  }
+}
diff --git web/static/assets/favicon.ico assets/static/favicon.ico
similarity index 100%
rename from data/sample-app/1.1.2/web/static/assets/favicon.ico
rename to data/sample-app/1.3.4/assets/static/favicon.ico
diff --git web/static/assets/images/phoenix.png assets/static/images/phoenix.png
similarity index 100%
rename from data/sample-app/1.1.2/web/static/assets/images/phoenix.png
rename to data/sample-app/1.3.4/assets/static/images/phoenix.png
diff --git web/static/assets/robots.txt assets/static/robots.txt
similarity index 100%
rename from data/sample-app/1.1.2/web/static/assets/robots.txt
rename to data/sample-app/1.3.4/assets/static/robots.txt
diff --git config/config.exs config/config.exs
index 52a4828..12bd41c 100644
--- config/config.exs
+++ config/config.exs
@@ -5,25 +5,23 @@
 # is restricted to this project.
 use Mix.Config
 
+# General application configuration
+config :sample_app,
+  ecto_repos: [SampleApp.Repo]
+
 # Configures the endpoint
-config :sample_app, SampleApp.Endpoint,
+config :sample_app, SampleAppWeb.Endpoint,
   url: [host: "localhost"],
-  root: Path.dirname(__DIR__),
   secret_key_base: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-  render_errors: [accepts: ~w(html json)],
+  render_errors: [view: SampleAppWeb.ErrorView, accepts: ~w(html json)],
   pubsub: [name: SampleApp.PubSub,
            adapter: Phoenix.PubSub.PG2]
 
 # Configures Elixir's Logger
 config :logger, :console,
   format: "$time $metadata[$level] $message\n",
-  metadata: [:request_id]
+  metadata: [:user_id]
 
 # Import environment specific config. This must remain at the bottom
 # of this file so it overrides the configuration defined above.
 import_config "#{Mix.env}.exs"
-
-# Configure phoenix generators
-config :phoenix, :generators,
-  migration: true,
-  binary_id: false
diff --git config/dev.exs config/dev.exs
index 473e8be..266bcda 100644
--- config/dev.exs
+++ config/dev.exs
@@ -6,30 +6,46 @@ use Mix.Config
 # The watchers configuration can be used to run external
 # watchers to your application. For example, we use it
 # with brunch.io to recompile .js and .css sources.
-config :sample_app, SampleApp.Endpoint,
+config :sample_app, SampleAppWeb.Endpoint,
   http: [port: 4000],
   debug_errors: true,
   code_reloader: true,
   check_origin: false,
-  watchers: [node: ["node_modules/brunch/bin/brunch", "watch", "--stdin"]]
+  watchers: [node: ["node_modules/brunch/bin/brunch", "watch", "--stdin",
+                    cd: Path.expand("../assets", __DIR__)]]
+
+# ## SSL Support
+#
+# In order to use HTTPS in development, a self-signed
+# certificate can be generated by running the following
+# command from your terminal:
+#
+#     openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -keyout priv/server.key -out priv/server.pem
+#
+# The `http:` config above can be replaced with:
+#
+#     https: [port: 4000, keyfile: "priv/server.key", certfile: "priv/server.pem"],
+#
+# If desired, both `http:` and `https:` keys can be
+# configured to run both http and https servers on
+# different ports.
 
 # Watch static and templates for browser reloading.
-config :sample_app, SampleApp.Endpoint,
+config :sample_app, SampleAppWeb.Endpoint,
   live_reload: [
     patterns: [
       ~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},
       ~r{priv/gettext/.*(po)$},
-      ~r{web/views/.*(ex)$},
-      ~r{web/templates/.*(eex)$}
+      ~r{lib/sample_app_web/views/.*(ex)$},
+      ~r{lib/sample_app_web/templates/.*(eex)$}
     ]
   ]
 
 # Do not include metadata nor timestamps in development logs
 config :logger, :console, format: "[$level] $message\n"
 
-# Set a higher stacktrace during development.
-# Do not configure such in production as keeping
-# and calculating stacktraces is usually expensive.
+# Set a higher stacktrace during development. Avoid configuring such
+# in production as building large stacktraces may be expensive.
 config :phoenix, :stacktrace_depth, 20
 
 # Configure your database
diff --git config/prod.exs config/prod.exs
index 920b334..ab7536b 100644
--- config/prod.exs
+++ config/prod.exs
@@ -1,20 +1,22 @@
 use Mix.Config
 
-# For production, we configure the host to read the PORT
-# from the system environment. Therefore, you will need
-# to set PORT=80 before running your server.
+# For production, we often load configuration from external
+# sources, such as your system environment. For this reason,
+# you won't find the :http configuration below, but set inside
+# SampleAppWeb.Endpoint.init/2 when load_from_system_env is
+# true. Any dynamic configuration should be done there.
 #
-# You should also configure the url host to something
-# meaningful, we use this information when generating URLs.
+# Don't forget to configure the url host to something meaningful,
+# Phoenix uses this information when generating URLs.
 #
-# Finally, we also include the path to a manifest
+# Finally, we also include the path to a cache manifest
 # containing the digested version of static files. This
-# manifest is generated by the mix phoenix.digest task
+# manifest is generated by the mix phx.digest task
 # which you typically run after static files are built.
-config :sample_app, SampleApp.Endpoint,
-  http: [port: {:system, "PORT"}],
+config :sample_app, SampleAppWeb.Endpoint,
+  load_from_system_env: true,
   url: [host: "example.com", port: 80],
-  cache_static_manifest: "priv/static/manifest.json"
+  cache_static_manifest: "priv/static/cache_manifest.json"
 
 # Do not print debug messages in production
 config :logger, level: :info
@@ -24,10 +26,11 @@ config :logger, level: :info
 # To get SSL working, you will need to add the `https` key
 # to the previous section and set your `:url` port to 443:
 #
-#     config :sample_app, SampleApp.Endpoint,
+#     config :sample_app, SampleAppWeb.Endpoint,
 #       ...
 #       url: [host: "example.com", port: 443],
-#       https: [port: 443,
+#       https: [:inet6,
+#               port: 443,
 #               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
 #               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
 #
@@ -38,7 +41,7 @@ config :logger, level: :info
 # We also recommend setting `force_ssl`, ensuring no data is
 # ever sent via http, always redirecting to https:
 #
-#     config :sample_app, SampleApp.Endpoint,
+#     config :sample_app, SampleAppWeb.Endpoint,
 #       force_ssl: [hsts: true]
 #
 # Check `Plug.SSL` for all available options in `force_ssl`.
@@ -53,12 +56,8 @@ config :logger, level: :info
 # Alternatively, you can configure exactly which server to
 # start per endpoint:
 #
-#     config :sample_app, SampleApp.Endpoint, server: true
+#     config :sample_app, SampleAppWeb.Endpoint, server: true
 #
-# You will also need to set the application root to `.` in order
-# for the new static assets to be served after a hot upgrade:
-#
-#     config :sample_app, SampleApp.Endpoint, root: "."
 
 # Finally import the config/prod.secret.exs
 # which should be versioned separately.
diff --git config/prod.secret.exs config/prod.secret.exs
index ffc4767..b7d67b4 100644
--- config/prod.secret.exs
+++ config/prod.secret.exs
@@ -1,9 +1,14 @@
 use Mix.Config
 
 # In this file, we keep production configuration that
-# you likely want to automate and keep it away from
+# you'll likely want to automate and keep away from
 # your version control system.
-config :sample_app, SampleApp.Endpoint,
+#
+# You should document the content of this
+# file or create a script for recreating it, since it's
+# kept out of version control and might be hard to recover
+# or recreate for your teammates (or yourself later on).
+config :sample_app, SampleAppWeb.Endpoint,
   secret_key_base: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
 
 # Configure your database
@@ -12,4 +17,4 @@ config :sample_app, SampleApp.Repo,
   username: "postgres",
   password: "postgres",
   database: "sample_app_prod",
-  pool_size: 20
+  pool_size: 15
diff --git config/test.exs config/test.exs
index 78f87f6..f6ca638 100644
--- config/test.exs
+++ config/test.exs
@@ -2,7 +2,7 @@ use Mix.Config
 
 # We don't run a server during test. If one is required,
 # you can enable the server option below.
-config :sample_app, SampleApp.Endpoint,
+config :sample_app, SampleAppWeb.Endpoint,
   http: [port: 4001],
   server: false
 
diff --git a/data/sample-app/1.3.4/lib/sample_app/application.ex lib/sample_app/application.ex
new file mode 100644
index 0000000..5578069
--- /dev/null
+++ lib/sample_app/application.ex
@@ -0,0 +1,31 @@
+defmodule SampleApp.Application do
+  use Application
+
+  # See https://hexdocs.pm/elixir/Application.html
+  # for more information on OTP Applications
+  def start(_type, _args) do
+    import Supervisor.Spec
+
+    # Define workers and child supervisors to be supervised
+    children = [
+      # Start the Ecto repository
+      supervisor(SampleApp.Repo, []),
+      # Start the endpoint when the application starts
+      supervisor(SampleAppWeb.Endpoint, []),
+      # Start your own worker by calling: SampleApp.Worker.start_link(arg1, arg2, arg3)
+      # worker(SampleApp.Worker, [arg1, arg2, arg3]),
+    ]
+
+    # See https://hexdocs.pm/elixir/Supervisor.html
+    # for other strategies and supported options
+    opts = [strategy: :one_for_one, name: SampleApp.Supervisor]
+    Supervisor.start_link(children, opts)
+  end
+
+  # Tell Phoenix to update the endpoint configuration
+  # whenever the application is updated.
+  def config_change(changed, _new, removed) do
+    SampleAppWeb.Endpoint.config_change(changed, removed)
+    :ok
+  end
+end
diff --git lib/sample_app/repo.ex lib/sample_app/repo.ex
index 37477c1..8fdf2d0 100644
--- lib/sample_app/repo.ex
+++ lib/sample_app/repo.ex
@@ -1,3 +1,11 @@
 defmodule SampleApp.Repo do
   use Ecto.Repo, otp_app: :sample_app
+
+  @doc """
+  Dynamically loads the repository url from the
+  DATABASE_URL environment variable.
+  """
+  def init(_, opts) do
+    {:ok, Keyword.put(opts, :url, System.get_env("DATABASE_URL"))}
+  end
 end
diff --git lib/sample_app.ex lib/sample_app.ex
index fc7be19..8b25718 100644
--- lib/sample_app.ex
+++ lib/sample_app.ex
@@ -1,30 +1,9 @@
 defmodule SampleApp do
-  use Application
+  @moduledoc """
+  SampleApp keeps the contexts that define your domain
+  and business logic.
 
-  # See http://elixir-lang.org/docs/stable/elixir/Application.html
-  # for more information on OTP Applications
-  def start(_type, _args) do
-    import Supervisor.Spec, warn: false
-
-    children = [
-      # Start the endpoint when the application starts
-      supervisor(SampleApp.Endpoint, []),
-      # Start the Ecto repository
-      supervisor(SampleApp.Repo, []),
-      # Here you could define other workers and supervisors as children
-      # worker(SampleApp.Worker, [arg1, arg2, arg3]),
-    ]
-
-    # See http://elixir-lang.org/docs/stable/elixir/Supervisor.html
-    # for other strategies and supported options
-    opts = [strategy: :one_for_one, name: SampleApp.Supervisor]
-    Supervisor.start_link(children, opts)
-  end
-
-  # Tell Phoenix to update the endpoint configuration
-  # whenever the application is updated.
-  def config_change(changed, _new, removed) do
-    SampleApp.Endpoint.config_change(changed, removed)
-    :ok
-  end
+  Contexts are also responsible for managing your data, regardless
+  if it comes from the database, an external API or others.
+  """
 end
diff --git web/channels/user_socket.ex lib/sample_app_web/channels/user_socket.ex
similarity index 79%
rename from data/sample-app/1.1.2/web/channels/user_socket.ex
rename to data/sample-app/1.3.4/lib/sample_app_web/channels/user_socket.ex
index 0ce05b4..80c0cfa 100644
--- web/channels/user_socket.ex
+++ lib/sample_app_web/channels/user_socket.ex
@@ -1,8 +1,8 @@
-defmodule SampleApp.UserSocket do
+defmodule SampleAppWeb.UserSocket do
   use Phoenix.Socket
 
   ## Channels
-  # channel "rooms:*", SampleApp.RoomChannel
+  # channel "room:*", SampleAppWeb.RoomChannel
 
   ## Transports
   transport :websocket, Phoenix.Transports.WebSocket
@@ -25,12 +25,12 @@ defmodule SampleApp.UserSocket do
 
   # Socket id's are topics that allow you to identify all sockets for a given user:
   #
-  #     def id(socket), do: "users_socket:#{socket.assigns.user_id}"
+  #     def id(socket), do: "user_socket:#{socket.assigns.user_id}"
   #
   # Would allow you to broadcast a "disconnect" event and terminate
   # all active sockets and channels for a given user:
   #
-  #     SampleApp.Endpoint.broadcast("users_socket:#{user.id}", "disconnect", %{})
+  #     SampleAppWeb.Endpoint.broadcast("user_socket:#{user.id}", "disconnect", %{})
   #
   # Returning `nil` makes this socket anonymous.
   def id(_socket), do: nil
diff --git a/data/sample-app/1.3.4/lib/sample_app_web/controllers/page_controller.ex lib/sample_app_web/controllers/page_controller.ex
new file mode 100644
index 0000000..c981617
--- /dev/null
+++ lib/sample_app_web/controllers/page_controller.ex
@@ -0,0 +1,7 @@
+defmodule SampleAppWeb.PageController do
+  use SampleAppWeb, :controller
+
+  def index(conn, _params) do
+    render conn, "index.html"
+  end
+end
diff --git lib/sample_app/endpoint.ex lib/sample_app_web/endpoint.ex
similarity index 54%
rename from data/sample-app/1.1.2/lib/sample_app/endpoint.ex
rename to data/sample-app/1.3.4/lib/sample_app_web/endpoint.ex
index 643fb57..02c04d8 100644
--- lib/sample_app/endpoint.ex
+++ lib/sample_app_web/endpoint.ex
@@ -1,7 +1,7 @@
-defmodule SampleApp.Endpoint do
+defmodule SampleAppWeb.Endpoint do
   use Phoenix.Endpoint, otp_app: :sample_app
 
-  socket "/socket", SampleApp.UserSocket
+  socket "/socket", SampleAppWeb.UserSocket
 
   # Serve at "/" the static files from "priv/static" directory.
   #
@@ -19,7 +19,6 @@ defmodule SampleApp.Endpoint do
     plug Phoenix.CodeReloader
   end
 
-  plug Plug.RequestId
   plug Plug.Logger
 
   plug Plug.Parsers,
@@ -30,10 +29,28 @@ defmodule SampleApp.Endpoint do
   plug Plug.MethodOverride
   plug Plug.Head
 
+  # The session will be stored in the cookie and signed,
+  # this means its contents can be read but not tampered with.
+  # Set :encryption_salt if you would also like to encrypt it.
   plug Plug.Session,
     store: :cookie,
     key: "_sample_app_key",
     signing_salt: "abcdefgh"
 
-  plug SampleApp.Router
+  plug SampleAppWeb.Router
+
+  @doc """
+  Callback invoked for dynamically configuring the endpoint.
+
+  It receives the endpoint configuration and checks if
+  configuration should be loaded from the system environment.
+  """
+  def init(_key, config) do
+    if config[:load_from_system_env] do
+      port = System.get_env("PORT") || raise "expected the PORT environment variable to be set"
+      {:ok, Keyword.put(config, :http, [:inet6, port: port])}
+    else
+      {:ok, config}
+    end
+  end
 end
diff --git web/gettext.ex lib/sample_app_web/gettext.ex
similarity index 73%
rename from data/sample-app/1.1.2/web/gettext.ex
rename to data/sample-app/1.3.4/lib/sample_app_web/gettext.ex
index bacaaba..448a09d 100644
--- web/gettext.ex
+++ lib/sample_app_web/gettext.ex
@@ -1,11 +1,11 @@
-defmodule SampleApp.Gettext do
+defmodule SampleAppWeb.Gettext do
   @moduledoc """
   A module providing Internationalization with a gettext-based API.
 
-  By using [Gettext](http://hexdocs.pm/gettext),
+  By using [Gettext](https://hexdocs.pm/gettext),
   your module gains a set of macros for translations, for example:
 
-      import SampleApp.Gettext
+      import SampleAppWeb.Gettext
 
       # Simple translation
       gettext "Here is the string to translate"
@@ -18,7 +18,7 @@ defmodule SampleApp.Gettext do
       # Domain-based translation
       dgettext "errors", "Here is the error message to translate"
 
-  See the [Gettext Docs](http://hexdocs.pm/gettext) for detailed usage.
+  See the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.
   """
   use Gettext, otp_app: :sample_app
 end
diff --git web/router.ex lib/sample_app_web/router.ex
similarity index 76%
rename from data/sample-app/1.1.2/web/router.ex
rename to data/sample-app/1.3.4/lib/sample_app_web/router.ex
index de84255..67e88f4 100644
--- web/router.ex
+++ lib/sample_app_web/router.ex
@@ -1,5 +1,5 @@
-defmodule SampleApp.Router do
-  use SampleApp.Web, :router
+defmodule SampleAppWeb.Router do
+  use SampleAppWeb, :router
 
   pipeline :browser do
     plug :accepts, ["html"]
@@ -13,14 +13,14 @@ defmodule SampleApp.Router do
     plug :accepts, ["json"]
   end
 
-  scope "/", SampleApp do
+  scope "/", SampleAppWeb do
     pipe_through :browser # Use the default browser stack
 
     get "/", PageController, :index
   end
 
   # Other scopes may use custom stacks.
-  # scope "/api", SampleApp do
+  # scope "/api", SampleAppWeb do
   #   pipe_through :api
   # end
 end
diff --git web/templates/layout/app.html.eex lib/sample_app_web/templates/layout/app.html.eex
similarity index 100%
rename from data/sample-app/1.1.2/web/templates/layout/app.html.eex
rename to data/sample-app/1.3.4/lib/sample_app_web/templates/layout/app.html.eex
diff --git web/templates/page/index.html.eex lib/sample_app_web/templates/page/index.html.eex
similarity index 87%
rename from data/sample-app/1.1.2/web/templates/page/index.html.eex
rename to data/sample-app/1.3.4/lib/sample_app_web/templates/page/index.html.eex
index cbb315e..0988ea5 100644
--- web/templates/page/index.html.eex
+++ lib/sample_app_web/templates/page/index.html.eex
@@ -1,5 +1,5 @@
 <div class="jumbotron">
-  <h2><%= gettext "Welcome to %{name}", name: "Phoenix!" %></h2>
+  <h2><%= gettext "Welcome to %{name}!", name: "Phoenix" %></h2>
   <p class="lead">A productive web framework that<br />does not compromise speed and maintainability.</p>
 </div>
 
@@ -11,7 +11,7 @@
         <a href="http://phoenixframework.org/docs/overview">Guides</a>
       </li>
       <li>
-        <a href="http://hexdocs.pm/phoenix">Docs</a>
+        <a href="https://hexdocs.pm/phoenix">Docs</a>
       </li>
       <li>
         <a href="https://github.com/phoenixframework/phoenix">Source</a>
diff --git a/data/sample-app/1.3.4/lib/sample_app_web/views/error_helpers.ex lib/sample_app_web/views/error_helpers.ex
new file mode 100644
index 0000000..3425ae8
--- /dev/null
+++ lib/sample_app_web/views/error_helpers.ex
@@ -0,0 +1,44 @@
+defmodule SampleAppWeb.ErrorHelpers do
+  @moduledoc """
+  Conveniences for translating and building error messages.
+  """
+
+  use Phoenix.HTML
+
+  @doc """
+  Generates tag for inlined form input errors.
+  """
+  def error_tag(form, field) do
+    Enum.map(Keyword.get_values(form.errors, field), fn (error) ->
+      content_tag :span, translate_error(error), class: "help-block"
+    end)
+  end
+
+  @doc """
+  Translates an error message using gettext.
+  """
+  def translate_error({msg, opts}) do
+    # When using gettext, we typically pass the strings we want
+    # to translate as a static argument:
+    #
+    #     # Translate "is invalid" in the "errors" domain
+    #     dgettext "errors", "is invalid"
+    #
+    #     # Translate the number of files with plural rules
+    #     dngettext "errors", "1 file", "%{count} files", count
+    #
+    # Because the error messages we show in our forms and APIs
+    # are defined inside Ecto, we need to translate them dynamically.
+    # This requires us to call the Gettext module passing our gettext
+    # backend as first argument.
+    #
+    # Note we use the "errors" domain, which means translations
+    # should be written to the errors.po file. The :count option is
+    # set by Ecto and indicates we should also apply plural rules.
+    if count = opts[:count] do
+      Gettext.dngettext(SampleAppWeb.Gettext, "errors", msg, msg, count, opts)
+    else
+      Gettext.dgettext(SampleAppWeb.Gettext, "errors", msg, opts)
+    end
+  end
+end
diff --git a/data/sample-app/1.3.4/lib/sample_app_web/views/error_view.ex lib/sample_app_web/views/error_view.ex
new file mode 100644
index 0000000..90e0830
--- /dev/null
+++ lib/sample_app_web/views/error_view.ex
@@ -0,0 +1,16 @@
+defmodule SampleAppWeb.ErrorView do
+  use SampleAppWeb, :view
+
+  # If you want to customize a particular status code
+  # for a certain format, you may uncomment below.
+  # def render("500.html", _assigns) do
+  #   "Internal Server Error"
+  # end
+
+  # By default, Phoenix returns the status message from
+  # the template name. For example, "404.html" becomes
+  # "Not Found".
+  def template_not_found(template, _assigns) do
+    Phoenix.Controller.status_message_from_template(template)
+  end
+end
diff --git a/data/sample-app/1.3.4/lib/sample_app_web/views/layout_view.ex lib/sample_app_web/views/layout_view.ex
new file mode 100644
index 0000000..0e4cd22
--- /dev/null
+++ lib/sample_app_web/views/layout_view.ex
@@ -0,0 +1,3 @@
+defmodule SampleAppWeb.LayoutView do
+  use SampleAppWeb, :view
+end
diff --git a/data/sample-app/1.3.4/lib/sample_app_web/views/page_view.ex lib/sample_app_web/views/page_view.ex
new file mode 100644
index 0000000..b51be24
--- /dev/null
+++ lib/sample_app_web/views/page_view.ex
@@ -0,0 +1,3 @@
+defmodule SampleAppWeb.PageView do
+  use SampleAppWeb, :view
+end
diff --git a/data/sample-app/1.3.4/lib/sample_app_web.ex lib/sample_app_web.ex
new file mode 100644
index 0000000..e9fd1b8
--- /dev/null
+++ lib/sample_app_web.ex
@@ -0,0 +1,67 @@
+defmodule SampleAppWeb do
+  @moduledoc """
+  The entrypoint for defining your web interface, such
+  as controllers, views, channels and so on.
+
+  This can be used in your application as:
+
+      use SampleAppWeb, :controller
+      use SampleAppWeb, :view
+
+  The definitions below will be executed for every view,
+  controller, etc, so keep them short and clean, focused
+  on imports, uses and aliases.
+
+  Do NOT define functions inside the quoted expressions
+  below. Instead, define any helper function in modules
+  and import those modules here.
+  """
+
+  def controller do
+    quote do
+      use Phoenix.Controller, namespace: SampleAppWeb
+      import Plug.Conn
+      import SampleAppWeb.Router.Helpers
+      import SampleAppWeb.Gettext
+    end
+  end
+
+  def view do
+    quote do
+      use Phoenix.View, root: "lib/sample_app_web/templates",
+                        namespace: SampleAppWeb
+
+      # Import convenience functions from controllers
+      import Phoenix.Controller, only: [get_flash: 2, view_module: 1]
+
+      # Use all HTML functionality (forms, tags, etc)
+      use Phoenix.HTML
+
+      import SampleAppWeb.Router.Helpers
+      import SampleAppWeb.ErrorHelpers
+      import SampleAppWeb.Gettext
+    end
+  end
+
+  def router do
+    quote do
+      use Phoenix.Router
+      import Plug.Conn
+      import Phoenix.Controller
+    end
+  end
+
+  def channel do
+    quote do
+      use Phoenix.Channel
+      import SampleAppWeb.Gettext
+    end
+  end
+
+  @doc """
+  When used, dispatch to the appropriate controller/view/etc.
+  """
+  defmacro __using__(which) when is_atom(which) do
+    apply(__MODULE__, which, [])
+  end
+end
diff --git mix.exs mix.exs
index 6e377bb..682b949 100644
--- mix.exs
+++ mix.exs
@@ -2,51 +2,59 @@ defmodule SampleApp.Mixfile do
   use Mix.Project
 
   def project do
-    [app: :sample_app,
-     version: "0.0.1",
-     elixir: "~> 1.0",
-     elixirc_paths: elixirc_paths(Mix.env),
-     compilers: [:phoenix, :gettext] ++ Mix.compilers,
-     build_embedded: Mix.env == :prod,
-     start_permanent: Mix.env == :prod,
-     aliases: aliases,
-     deps: deps]
+    [
+      app: :sample_app,
+      version: "0.0.1",
+      elixir: "~> 1.4",
+      elixirc_paths: elixirc_paths(Mix.env),
+      compilers: [:phoenix, :gettext] ++ Mix.compilers,
+      start_permanent: Mix.env == :prod,
+      aliases: aliases(),
+      deps: deps()
+    ]
   end
 
   # Configuration for the OTP application.
   #
   # Type `mix help compile.app` for more information.
   def application do
-    [mod: {SampleApp, []},
-     applications: [:phoenix, :phoenix_html, :cowboy, :logger, :gettext,
-                    :phoenix_ecto, :postgrex]]
+    [
+      mod: {SampleApp.Application, []},
+      extra_applications: [:logger, :runtime_tools]
+    ]
   end
 
   # Specifies which paths to compile per environment.
-  defp elixirc_paths(:test), do: ["lib", "web", "test/support"]
-  defp elixirc_paths(_),     do: ["lib", "web"]
+  defp elixirc_paths(:test), do: ["lib", "test/support"]
+  defp elixirc_paths(_),     do: ["lib"]
 
   # Specifies your project dependencies.
   #
   # Type `mix help deps` for examples and options.
   defp deps do
-    [{:phoenix, "~> 1.1.2"},
-     {:phoenix_ecto, "~> 2.0"},
-     {:postgrex, ">= 0.0.0"},
-     {:phoenix_html, "~> 2.3"},
-     {:phoenix_live_reload, "~> 1.0", only: :dev},
-     {:gettext, "~> 0.9"},
-     {:cowboy, "~> 1.0"}]
+    [
+      {:phoenix, "~> 1.3.4"},
+      {:phoenix_pubsub, "~> 1.0"},
+      {:phoenix_ecto, "~> 3.2"},
+      {:postgrex, ">= 0.0.0"},
+      {:phoenix_html, "~> 2.10"},
+      {:phoenix_live_reload, "~> 1.0", only: :dev},
+      {:gettext, "~> 0.11"},
+      {:cowboy, "~> 1.0"}
+    ]
   end
 
-  # Aliases are shortcut or tasks specific to the current project.
+  # Aliases are shortcuts or tasks specific to the current project.
   # For example, to create, migrate and run the seeds file at once:
   #
   #     $ mix ecto.setup
   #
   # See the documentation for `Mix` for more info on aliases.
   defp aliases do
-    ["ecto.setup": ["ecto.create", "ecto.migrate", "run priv/repo/seeds.exs"],
-     "ecto.reset": ["ecto.drop", "ecto.setup"]]
+    [
+      "ecto.setup": ["ecto.create", "ecto.migrate", "run priv/repo/seeds.exs"],
+      "ecto.reset": ["ecto.drop", "ecto.setup"],
+      "test": ["ecto.create --quiet", "ecto.migrate", "test"]
+    ]
   end
 end
diff --git package.json b/data/sample-app/1.1.2/package.json
deleted file mode 100644
index 3684112..0000000
--- package.json
+++ /dev/null
@@ -1,14 +0,0 @@
-{
-  "repository": {
-  },
-  "dependencies": {
-    "babel-brunch": "^6.0.0",
-    "brunch": "^2.1.1",
-    "clean-css-brunch": ">= 1.0 < 1.8",
-    "css-brunch": ">= 1.0 < 1.8",
-    "javascript-brunch": ">= 1.0 < 1.8",
-    "uglify-js-brunch": ">= 1.0 < 1.8",
-    "phoenix": "file:deps/phoenix",
-    "phoenix_html": "file:deps/phoenix_html"
-  }
-}
diff --git priv/gettext/en/LC_MESSAGES/errors.po priv/gettext/en/LC_MESSAGES/errors.po
index 02b2a76..a589998 100644
--- priv/gettext/en/LC_MESSAGES/errors.po
+++ priv/gettext/en/LC_MESSAGES/errors.po
@@ -1,7 +1,11 @@
-## `msgid`s in this file come from POT (.pot) files. Do not add, change, or
-## remove `msgid`s manually here as they're tied to the ones in the
-## corresponding POT file (with the same domain). Use `mix gettext.extract
-## --merge` or `mix gettext.merge` to merge POT files into PO files.
+## `msgid`s in this file come from POT (.pot) files.
+##
+## Do not add, change, or remove `msgid`s manually here as
+## they're tied to the ones in the corresponding POT file
+## (with the same domain).
+##
+## Use `mix gettext.extract --merge` or `mix gettext.merge`
+## to merge POT files into PO files.
 msgid ""
 msgstr ""
 "Language: en\n"
@@ -18,6 +22,10 @@ msgstr ""
 msgid "is invalid"
 msgstr ""
 
+## From Ecto.Changeset.validate_acceptance/3
+msgid "must be accepted"
+msgstr ""
+
 ## From Ecto.Changeset.validate_format/3
 msgid "has invalid format"
 msgstr ""
@@ -35,10 +43,10 @@ msgid "does not match confirmation"
 msgstr ""
 
 ## From Ecto.Changeset.no_assoc_constraint/3
-msgid "is still associated to this entry"
+msgid "is still associated with this entry"
 msgstr ""
 
-msgid "are still associated to this entry"
+msgid "are still associated with this entry"
 msgstr ""
 
 ## From Ecto.Changeset.validate_length/3
@@ -73,27 +81,17 @@ msgstr[0] ""
 msgstr[1] ""
 
 ## From Ecto.Changeset.validate_number/3
-msgid "must be less than %{count}"
-msgid_plural "must be less than %{count}"
-msgstr[0] ""
-msgstr[1] ""
+msgid "must be less than %{number}"
+msgstr ""
 
-msgid "must be greater than %{count}"
-msgid_plural "must be greater than %{count}"
-msgstr[0] ""
-msgstr[1] ""
+msgid "must be greater than %{number}"
+msgstr ""
 
-msgid "must be less than or equal to %{count}"
-msgid_plural "must be less than or equal to %{count}"
-msgstr[0] ""
-msgstr[1] ""
+msgid "must be less than or equal to %{number}"
+msgstr ""
 
-msgid "must be greater than or equal to %{count}"
-msgid_plural "must be greater than or equal to %{count}"
-msgstr[0] ""
-msgstr[1] ""
+msgid "must be greater than or equal to %{number}"
+msgstr ""
 
-msgid "must be equal to %{count}"
-msgid_plural "must be equal to %{count}"
-msgstr[0] ""
-msgstr[1] ""
+msgid "must be equal to %{number}"
+msgstr ""
diff --git priv/gettext/errors.pot priv/gettext/errors.pot
index 893d26c..7b2d5ca 100644
--- priv/gettext/errors.pot
+++ priv/gettext/errors.pot
@@ -1,8 +1,13 @@
-## This file is a PO Template file. `msgid`s here are often extracted from
-## source code; add new translations manually only if they're dynamic
-## translations that can't be statically extracted. Run `mix
-## gettext.extract` to bring this file up to date. Leave `msgstr`s empty as
-## changing them here as no effect; edit them in PO (`.po`) files instead.
+## This file is a PO Template file.
+##
+## `msgid`s here are often extracted from source code.
+## Add new translations manually only if they're dynamic
+## translations that can't be statically extracted.
+##
+## Run `mix gettext.extract` to bring this file up to
+## date. Leave `msgstr`s empty as changing them here as no
+## effect: edit them in PO (`.po`) files instead.
+
 ## From Ecto.Changeset.cast/4
 msgid "can't be blank"
 msgstr ""
@@ -15,6 +20,10 @@ msgstr ""
 msgid "is invalid"
 msgstr ""
 
+## From Ecto.Changeset.validate_acceptance/3
+msgid "must be accepted"
+msgstr ""
+
 ## From Ecto.Changeset.validate_format/3
 msgid "has invalid format"
 msgstr ""
@@ -32,10 +41,10 @@ msgid "does not match confirmation"
 msgstr ""
 
 ## From Ecto.Changeset.no_assoc_constraint/3
-msgid "is still associated to this entry"
+msgid "is still associated with this entry"
 msgstr ""
 
-msgid "are still associated to this entry"
+msgid "are still associated with this entry"
 msgstr ""
 
 ## From Ecto.Changeset.validate_length/3
@@ -70,27 +79,17 @@ msgstr[0] ""
 msgstr[1] ""
 
 ## From Ecto.Changeset.validate_number/3
-msgid "must be less than %{count}"
-msgid_plural "must be less than %{count}"
-msgstr[0] ""
-msgstr[1] ""
+msgid "must be less than %{number}"
+msgstr ""
 
-msgid "must be greater than %{count}"
-msgid_plural "must be greater than %{count}"
-msgstr[0] ""
-msgstr[1] ""
+msgid "must be greater than %{number}"
+msgstr ""
 
-msgid "must be less than or equal to %{count}"
-msgid_plural "must be less than or equal to %{count}"
-msgstr[0] ""
-msgstr[1] ""
+msgid "must be less than or equal to %{number}"
+msgstr ""
 
-msgid "must be greater than or equal to %{count}"
-msgid_plural "must be greater than or equal to %{count}"
-msgstr[0] ""
-msgstr[1] ""
+msgid "must be greater than or equal to %{number}"
+msgstr ""
 
-msgid "must be equal to %{count}"
-msgid_plural "must be equal to %{count}"
-msgstr[0] ""
-msgstr[1] ""
+msgid "must be equal to %{number}"
+msgstr ""
diff --git priv/repo/seeds.exs priv/repo/seeds.exs
index c4de0ce..390853d 100644
--- priv/repo/seeds.exs
+++ priv/repo/seeds.exs
@@ -5,7 +5,7 @@
 # Inside the script, you can read and write to any of your
 # repositories directly:
 #
-#     SampleApp.Repo.insert!(%SampleApp.SomeModel{})
+#     SampleApp.Repo.insert!(%SampleApp.SomeSchema{})
 #
 # We recommend using the bang functions (`insert!`, `update!`
 # and so on) as they will fail if something goes wrong.
diff --git test/controllers/page_controller_test.exs test/sample_app_web/controllers/page_controller_test.exs
similarity index 64%
rename from data/sample-app/1.1.2/test/controllers/page_controller_test.exs
rename to data/sample-app/1.3.4/test/sample_app_web/controllers/page_controller_test.exs
index f8a7ee8..23ef554 100644
--- test/controllers/page_controller_test.exs
+++ test/sample_app_web/controllers/page_controller_test.exs
@@ -1,5 +1,5 @@
-defmodule SampleApp.PageControllerTest do
-  use SampleApp.ConnCase
+defmodule SampleAppWeb.PageControllerTest do
+  use SampleAppWeb.ConnCase
 
   test "GET /", %{conn: conn} do
     conn = get conn, "/"
diff --git a/data/sample-app/1.3.4/test/sample_app_web/views/error_view_test.exs test/sample_app_web/views/error_view_test.exs
new file mode 100644
index 0000000..7bcd5db
--- /dev/null
+++ test/sample_app_web/views/error_view_test.exs
@@ -0,0 +1,16 @@
+defmodule SampleAppWeb.ErrorViewTest do
+  use SampleAppWeb.ConnCase, async: true
+
+  # Bring render/3 and render_to_string/3 for testing custom views
+  import Phoenix.View
+
+  test "renders 404.html" do
+    assert render_to_string(SampleAppWeb.ErrorView, "404.html", []) ==
+           "Not Found"
+  end
+
+  test "renders 500.html" do
+    assert render_to_string(SampleAppWeb.ErrorView, "500.html", []) ==
+           "Internal Server Error"
+  end
+end
diff --git a/data/sample-app/1.3.4/test/sample_app_web/views/layout_view_test.exs test/sample_app_web/views/layout_view_test.exs
new file mode 100644
index 0000000..6125800
--- /dev/null
+++ test/sample_app_web/views/layout_view_test.exs
@@ -0,0 +1,3 @@
+defmodule SampleAppWeb.LayoutViewTest do
+  use SampleAppWeb.ConnCase, async: true
+end
diff --git a/data/sample-app/1.3.4/test/sample_app_web/views/page_view_test.exs test/sample_app_web/views/page_view_test.exs
new file mode 100644
index 0000000..fe4c216
--- /dev/null
+++ test/sample_app_web/views/page_view_test.exs
@@ -0,0 +1,3 @@
+defmodule SampleAppWeb.PageViewTest do
+  use SampleAppWeb.ConnCase, async: true
+end
diff --git test/support/channel_case.ex test/support/channel_case.ex
index d95e3dc..665b82c 100644
--- test/support/channel_case.ex
+++ test/support/channel_case.ex
@@ -1,11 +1,11 @@
-defmodule SampleApp.ChannelCase do
+defmodule SampleAppWeb.ChannelCase do
   @moduledoc """
   This module defines the test case to be used by
   channel tests.
 
   Such tests rely on `Phoenix.ChannelTest` and also
-  imports other functionality to make it easier
-  to build and query models.
+  import other functionality to make it easier
+  to build common datastructures and query the data layer.
 
   Finally, if the test case interacts with the database,
   it cannot be async. For this reason, every test runs
@@ -20,22 +20,18 @@ defmodule SampleApp.ChannelCase do
       # Import conveniences for testing with channels
       use Phoenix.ChannelTest
 
-      alias SampleApp.Repo
-      import Ecto
-      import Ecto.Changeset
-      import Ecto.Query, only: [from: 1, from: 2]
-
-
       # The default endpoint for testing
-      @endpoint SampleApp.Endpoint
+      @endpoint SampleAppWeb.Endpoint
     end
   end
 
+
   setup tags do
+    :ok = Ecto.Adapters.SQL.Sandbox.checkout(SampleApp.Repo)
     unless tags[:async] do
-      Ecto.Adapters.SQL.restart_test_transaction(SampleApp.Repo, [])
+      Ecto.Adapters.SQL.Sandbox.mode(SampleApp.Repo, {:shared, self()})
     end
-
     :ok
   end
+
 end
diff --git test/support/conn_case.ex test/support/conn_case.ex
index 19b1a66..7c07f2d 100644
--- test/support/conn_case.ex
+++ test/support/conn_case.ex
@@ -1,11 +1,11 @@
-defmodule SampleApp.ConnCase do
+defmodule SampleAppWeb.ConnCase do
   @moduledoc """
   This module defines the test case to be used by
   tests that require setting up a connection.
 
   Such tests rely on `Phoenix.ConnTest` and also
-  imports other functionality to make it easier
-  to build and query models.
+  import other functionality to make it easier
+  to build common datastructures and query the data layer.
 
   Finally, if the test case interacts with the database,
   it cannot be async. For this reason, every test runs
@@ -19,24 +19,20 @@ defmodule SampleApp.ConnCase do
     quote do
       # Import conveniences for testing with connections
       use Phoenix.ConnTest
-
-      alias SampleApp.Repo
-      import Ecto
-      import Ecto.Changeset
-      import Ecto.Query, only: [from: 1, from: 2]
-
-      import SampleApp.Router.Helpers
+      import SampleAppWeb.Router.Helpers
 
       # The default endpoint for testing
-      @endpoint SampleApp.Endpoint
+      @endpoint SampleAppWeb.Endpoint
     end
   end
 
+
   setup tags do
+    :ok = Ecto.Adapters.SQL.Sandbox.checkout(SampleApp.Repo)
     unless tags[:async] do
-      Ecto.Adapters.SQL.restart_test_transaction(SampleApp.Repo, [])
+      Ecto.Adapters.SQL.Sandbox.mode(SampleApp.Repo, {:shared, self()})
     end
-
-    {:ok, conn: Phoenix.ConnTest.conn()}
+    {:ok, conn: Phoenix.ConnTest.build_conn()}
   end
+
 end
diff --git a/data/sample-app/1.3.4/test/support/data_case.ex test/support/data_case.ex
new file mode 100644
index 0000000..3a682c2
--- /dev/null
+++ test/support/data_case.ex
@@ -0,0 +1,53 @@
+defmodule SampleApp.DataCase do
+  @moduledoc """
+  This module defines the setup for tests requiring
+  access to the application's data layer.
+
+  You may define functions here to be used as helpers in
+  your tests.
+
+  Finally, if the test case interacts with the database,
+  it cannot be async. For this reason, every test runs
+  inside a transaction which is reset at the beginning
+  of the test unless the test case is marked as async.
+  """
+
+  use ExUnit.CaseTemplate
+
+  using do
+    quote do
+      alias SampleApp.Repo
+
+      import Ecto
+      import Ecto.Changeset
+      import Ecto.Query
+      import SampleApp.DataCase
+    end
+  end
+
+  setup tags do
+    :ok = Ecto.Adapters.SQL.Sandbox.checkout(SampleApp.Repo)
+
+    unless tags[:async] do
+      Ecto.Adapters.SQL.Sandbox.mode(SampleApp.Repo, {:shared, self()})
+    end
+
+    :ok
+  end
+
+  @doc """
+  A helper that transform changeset errors to a map of messages.
+
+      assert {:error, changeset} = Accounts.create_user(%{password: "short"})
+      assert "password is too short" in errors_on(changeset).password
+      assert %{password: ["password is too short"]} = errors_on(changeset)
+
+  """
+  def errors_on(changeset) do
+    Ecto.Changeset.traverse_errors(changeset, fn {message, opts} ->
+      Enum.reduce(opts, message, fn {key, value}, acc ->
+        String.replace(acc, "%{#{key}}", to_string(value))
+      end)
+    end)
+  end
+end
diff --git test/support/model_case.ex b/data/sample-app/1.1.2/test/support/model_case.ex
deleted file mode 100644
index 7539ace..0000000
--- test/support/model_case.ex
+++ /dev/null
@@ -1,61 +0,0 @@
-defmodule SampleApp.ModelCase do
-  @moduledoc """
-  This module defines the test case to be used by
-  model tests.
-
-  You may define functions here to be used as helpers in
-  your model tests. See `errors_on/2`'s definition as reference.
-
-  Finally, if the test case interacts with the database,
-  it cannot be async. For this reason, every test runs
-  inside a transaction which is reset at the beginning
-  of the test unless the test case is marked as async.
-  """
-
-  use ExUnit.CaseTemplate
-
-  using do
-    quote do
-      alias SampleApp.Repo
-
-      import Ecto
-      import Ecto.Changeset
-      import Ecto.Query, only: [from: 1, from: 2]
-      import SampleApp.ModelCase
-    end
-  end
-
-  setup tags do
-    unless tags[:async] do
-      Ecto.Adapters.SQL.restart_test_transaction(SampleApp.Repo, [])
-    end
-
-    :ok
-  end
-
-  @doc """
-  Helper for returning list of errors in model when passed certain data.
-
-  ## Examples
-
-  Given a User model that lists `:name` as a required field and validates
-  `:password` to be safe, it would return:
-
-      iex> errors_on(%User{}, %{password: "password"})
-      [password: "is unsafe", name: "is blank"]
-
-  You could then write your assertion like:
-
-      assert {:password, "is unsafe"} in errors_on(%User{}, %{password: "password"})
-
-  You can also create the changeset manually and retrieve the errors
-  field directly:
-
-      iex> changeset = User.changeset(%User{}, password: "password")
-      iex> {:password, "is unsafe"} in changeset.errors
-      true
-  """
-  def errors_on(model, data) do
-    model.__struct__.changeset(model, data).errors
-  end
-end
diff --git test/test_helper.exs test/test_helper.exs
index be885a8..11eb15b 100644
--- test/test_helper.exs
+++ test/test_helper.exs
@@ -1,6 +1,4 @@
-ExUnit.start
+ExUnit.start()
 
-Mix.Task.run "ecto.create", ~w(-r SampleApp.Repo --quiet)
-Mix.Task.run "ecto.migrate", ~w(-r SampleApp.Repo --quiet)
-Ecto.Adapters.SQL.begin_test_transaction(SampleApp.Repo)
+Ecto.Adapters.SQL.Sandbox.mode(SampleApp.Repo, :manual)
 
diff --git test/views/error_view_test.exs b/data/sample-app/1.1.2/test/views/error_view_test.exs
deleted file mode 100644
index 9a858cb..0000000
--- test/views/error_view_test.exs
+++ /dev/null
@@ -1,21 +0,0 @@
-defmodule SampleApp.ErrorViewTest do
-  use SampleApp.ConnCase, async: true
-
-  # Bring render/3 and render_to_string/3 for testing custom views
-  import Phoenix.View
-
-  test "renders 404.html" do
-    assert render_to_string(SampleApp.ErrorView, "404.html", []) ==
-           "Page not found"
-  end
-
-  test "render 500.html" do
-    assert render_to_string(SampleApp.ErrorView, "500.html", []) ==
-           "Server internal error"
-  end
-
-  test "render any other" do
-    assert render_to_string(SampleApp.ErrorView, "505.html", []) ==
-           "Server internal error"
-  end
-end
diff --git test/views/layout_view_test.exs b/data/sample-app/1.1.2/test/views/layout_view_test.exs
deleted file mode 100644
index d552c68..0000000
--- test/views/layout_view_test.exs
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule SampleApp.LayoutViewTest do
-  use SampleApp.ConnCase, async: true
-end
\ No newline at end of file
diff --git test/views/page_view_test.exs b/data/sample-app/1.1.2/test/views/page_view_test.exs
deleted file mode 100644
index 79c5e76..0000000
--- test/views/page_view_test.exs
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule SampleApp.PageViewTest do
-  use SampleApp.ConnCase, async: true
-end
diff --git web/controllers/page_controller.ex b/data/sample-app/1.1.2/web/controllers/page_controller.ex
deleted file mode 100644
index 9d01363..0000000
--- web/controllers/page_controller.ex
+++ /dev/null
@@ -1,7 +0,0 @@
-defmodule SampleApp.PageController do
-  use SampleApp.Web, :controller
-
-  def index(conn, _params) do
-    render conn, "index.html"
-  end
-end
diff --git web/views/error_helpers.ex b/data/sample-app/1.1.2/web/views/error_helpers.ex
deleted file mode 100644
index d113aa5..0000000
--- web/views/error_helpers.ex
+++ /dev/null
@@ -1,35 +0,0 @@
-defmodule SampleApp.ErrorHelpers do
-  @moduledoc """
-  Conveniences for translating and building error messages.
-  """
-
-  use Phoenix.HTML
-
-  @doc """
-  Generates tag for inlined form input errors.
-  """
-  def error_tag(form, field) do
-    if error = form.errors[field] do
-      content_tag :span, translate_error(error), class: "help-block"
-    end
-  end
-
-  @doc """
-  Translates an error message using gettext.
-  """
-  def translate_error({msg, opts}) do
-    # Because error messages were defined within Ecto, we must
-    # call the Gettext module passing our Gettext backend. We
-    # also use the "errors" domain as translations are placed
-    # in the errors.po file. On your own code and templates,
-    # this could be written simply as:
-    #
-    #     dngettext "errors", "1 file", "%{count} files", count
-    #
-    Gettext.dngettext(SampleApp.Gettext, "errors", msg, msg, opts[:count], opts)
-  end
-
-  def translate_error(msg) do
-    Gettext.dgettext(SampleApp.Gettext, "errors", msg)
-  end
-end
diff --git web/views/error_view.ex b/data/sample-app/1.1.2/web/views/error_view.ex
deleted file mode 100644
index 4bbcf8a..0000000
--- web/views/error_view.ex
+++ /dev/null
@@ -1,17 +0,0 @@
-defmodule SampleApp.ErrorView do
-  use SampleApp.Web, :view
-
-  def render("404.html", _assigns) do
-    "Page not found"
-  end
-
-  def render("500.html", _assigns) do
-    "Server internal error"
-  end
-
-  # In case no render clause matches or no
-  # template is found, let's render it as 500
-  def template_not_found(_template, assigns) do
-    render "500.html", assigns
-  end
-end
diff --git web/views/layout_view.ex b/data/sample-app/1.1.2/web/views/layout_view.ex
deleted file mode 100644
index 34d43b9..0000000
--- web/views/layout_view.ex
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule SampleApp.LayoutView do
-  use SampleApp.Web, :view
-end
diff --git web/views/page_view.ex b/data/sample-app/1.1.2/web/views/page_view.ex
deleted file mode 100644
index 2f3b960..0000000
--- web/views/page_view.ex
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule SampleApp.PageView do
-  use SampleApp.Web, :view
-end
diff --git web/web.ex b/data/sample-app/1.1.2/web/web.ex
deleted file mode 100644
index 61ed75f..0000000
--- web/web.ex
+++ /dev/null
@@ -1,81 +0,0 @@
-defmodule SampleApp.Web do
-  @moduledoc """
-  A module that keeps using definitions for controllers,
-  views and so on.
-
-  This can be used in your application as:
-
-      use SampleApp.Web, :controller
-      use SampleApp.Web, :view
-
-  The definitions below will be executed for every view,
-  controller, etc, so keep them short and clean, focused
-  on imports, uses and aliases.
-
-  Do NOT define functions inside the quoted expressions
-  below.
-  """
-
-  def model do
-    quote do
-      use Ecto.Schema
-
-      import Ecto
-      import Ecto.Changeset
-      import Ecto.Query, only: [from: 1, from: 2]
-    end
-  end
-
-  def controller do
-    quote do
-      use Phoenix.Controller
-
-      alias SampleApp.Repo
-      import Ecto
-      import Ecto.Query, only: [from: 1, from: 2]
-
-      import SampleApp.Router.Helpers
-      import SampleApp.Gettext
-    end
-  end
-
-  def view do
-    quote do
-      use Phoenix.View, root: "web/templates"
-
-      # Import convenience functions from controllers
-      import Phoenix.Controller, only: [get_csrf_token: 0, get_flash: 2, view_module: 1]
-
-      # Use all HTML functionality (forms, tags, etc)
-      use Phoenix.HTML
-
-      import SampleApp.Router.Helpers
-      import SampleApp.ErrorHelpers
-      import SampleApp.Gettext
-    end
-  end
-
-  def router do
-    quote do
-      use Phoenix.Router
-    end
-  end
-
-  def channel do
-    quote do
-      use Phoenix.Channel
-
-      alias SampleApp.Repo
-      import Ecto
-      import Ecto.Query, only: [from: 1, from: 2]
-      import SampleApp.Gettext
-    end
-  end
-
-  @doc """
-  When used, dispatch to the appropriate controller/view/etc.
-  """
-  defmacro __using__(which) when is_atom(which) do
-    apply(__MODULE__, which, [])
-  end
-end
